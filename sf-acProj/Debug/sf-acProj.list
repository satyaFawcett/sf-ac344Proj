
sf-acProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001390  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001514  08001514  00002514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001598  08001598  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001598  08001598  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001598  08001598  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001598  08001598  00002598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800159c  0800159c  0000259c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080015a0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          00000180  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002ed7  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bf0  00000000  00000000  00005f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  00006b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001a3  00000000  00000000  00006dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed0b  00000000  00000000  00006f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004438  00000000  00000000  00025c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a45c0  00000000  00000000  0002a0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ce66e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d2c  00000000  00000000  000ce6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  000cf3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000005c 	.word	0x2000005c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080014fc 	.word	0x080014fc

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000060 	.word	0x20000060
 80001c0:	080014fc 	.word	0x080014fc

080001c4 <LED_init>:
#include "stm32l476xx.h"
#include<stdio.h>
#include<stdint.h>
#include "sf344fun.h"

void LED_init(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	/*Description:
	 *
	 */
	enable_GPIO_clock(0); //enable GPIOA clock
 80001c8:	2000      	movs	r0, #0
 80001ca:	f000 f999 	bl	8000500 <enable_GPIO_clock>
	GPIOA->MODER &= ~GPIO_MODER_MODE5;
 80001ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001dc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0; // set PA5 to output
 80001de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}

080001f2 <toggle_LED>:
void toggle_LED(){
 80001f2:	b480      	push	{r7}
 80001f4:	af00      	add	r7, sp, #0
	/*Description:
	 *
	 */
	GPIOA->ODR ^= GPIO_ODR_OD5;
 80001f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001fa:	695b      	ldr	r3, [r3, #20]
 80001fc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000200:	f083 0320 	eor.w	r3, r3, #32
 8000204:	6153      	str	r3, [r2, #20]
}
 8000206:	bf00      	nop
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	db0b      	blt.n	800023a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	4907      	ldr	r1, [pc, #28]	@ (8000248 <__NVIC_EnableIRQ+0x38>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e100 	.word	0xe000e100

0800024c <button_init>:
#include "sf344fun.h"
#include "delay.h"

extern volatile int button_pressed;

void button_init(void) {
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	/*Description:
	 *
	 */

	//board button init
	enable_GPIO_clock(2); //GPIOC clock on
 8000250:	2002      	movs	r0, #2
 8000252:	f000 f955 	bl	8000500 <enable_GPIO_clock>
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; //SYSCFG clock on
 8000256:	4b31      	ldr	r3, [pc, #196]	@ (800031c <button_init+0xd0>)
 8000258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800025a:	4a30      	ldr	r2, [pc, #192]	@ (800031c <button_init+0xd0>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6613      	str	r3, [r2, #96]	@ 0x60
	GPIOC->MODER &= ~GPIO_MODER_MODE13; // PC13 to input
 8000262:	4b2f      	ldr	r3, [pc, #188]	@ (8000320 <button_init+0xd4>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a2e      	ldr	r2, [pc, #184]	@ (8000320 <button_init+0xd4>)
 8000268:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800026c:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD13;
 800026e:	4b2c      	ldr	r3, [pc, #176]	@ (8000320 <button_init+0xd4>)
 8000270:	68db      	ldr	r3, [r3, #12]
 8000272:	4a2b      	ldr	r2, [pc, #172]	@ (8000320 <button_init+0xd4>)
 8000274:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000278:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPD13_1; // PC13 to pull down
 800027a:	4b29      	ldr	r3, [pc, #164]	@ (8000320 <button_init+0xd4>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	4a28      	ldr	r2, [pc, #160]	@ (8000320 <button_init+0xd4>)
 8000280:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000284:	60d3      	str	r3, [r2, #12]

	SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR4_EXTI13; //Map EXTI line 13 to PC
 8000286:	4b27      	ldr	r3, [pc, #156]	@ (8000324 <button_init+0xd8>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a26      	ldr	r2, [pc, #152]	@ (8000324 <button_init+0xd8>)
 800028c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000290:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
 8000292:	4b24      	ldr	r3, [pc, #144]	@ (8000324 <button_init+0xd8>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	4a23      	ldr	r2, [pc, #140]	@ (8000324 <button_init+0xd8>)
 8000298:	f043 0320 	orr.w	r3, r3, #32
 800029c:	6153      	str	r3, [r2, #20]
	EXTI->FTSR1 |= EXTI_FTSR1_FT13; //Set line 13 to falling edge trigger
 800029e:	4b22      	ldr	r3, [pc, #136]	@ (8000328 <button_init+0xdc>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4a21      	ldr	r2, [pc, #132]	@ (8000328 <button_init+0xdc>)
 80002a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002a8:	60d3      	str	r3, [r2, #12]
	EXTI->IMR1 |= EXTI_IMR1_IM13; //Unmask interrupt event for line 13
 80002aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000328 <button_init+0xdc>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000328 <button_init+0xdc>)
 80002b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002b4:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(EXTI15_10_IRQn); // enable interrupt handler for 15
 80002b6:	2028      	movs	r0, #40	@ 0x28
 80002b8:	f7ff ffaa 	bl	8000210 <__NVIC_EnableIRQ>

	//external button init
	GPIOC->MODER &= ~GPIO_MODER_MODE10; // PC10 to input
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <button_init+0xd4>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a17      	ldr	r2, [pc, #92]	@ (8000320 <button_init+0xd4>)
 80002c2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80002c6:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD10;
 80002c8:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <button_init+0xd4>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a14      	ldr	r2, [pc, #80]	@ (8000320 <button_init+0xd4>)
 80002ce:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80002d2:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPD10_1; // PC10 to pull down
 80002d4:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <button_init+0xd4>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a11      	ldr	r2, [pc, #68]	@ (8000320 <button_init+0xd4>)
 80002da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002de:	60d3      	str	r3, [r2, #12]

	SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR3_EXTI10; //Map EXTI line 10 to PC
 80002e0:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <button_init+0xd8>)
 80002e2:	691b      	ldr	r3, [r3, #16]
 80002e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000324 <button_init+0xd8>)
 80002e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80002ea:	6113      	str	r3, [r2, #16]
	SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI10_PC;
 80002ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000324 <button_init+0xd8>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000324 <button_init+0xd8>)
 80002f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002f6:	6113      	str	r3, [r2, #16]
	EXTI->FTSR1 |= EXTI_FTSR1_FT10; //Set line 10 to falling edge trigger
 80002f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <button_init+0xdc>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000328 <button_init+0xdc>)
 80002fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000302:	60d3      	str	r3, [r2, #12]
	EXTI->IMR1 |= EXTI_IMR1_IM10; //Unmask interrupt event for line 10
 8000304:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <button_init+0xdc>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a07      	ldr	r2, [pc, #28]	@ (8000328 <button_init+0xdc>)
 800030a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800030e:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(EXTI15_10_IRQn); // enable interrupt handler for 10 to 15
 8000310:	2028      	movs	r0, #40	@ 0x28
 8000312:	f7ff ff7d 	bl	8000210 <__NVIC_EnableIRQ>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000
 8000320:	48000800 	.word	0x48000800
 8000324:	40010000 	.word	0x40010000
 8000328:	40010400 	.word	0x40010400

0800032c <EXTI15_10_IRQHandler>:

// Interrupt handler for EXTI lines 10 to 15
void EXTI15_10_IRQHandler(void) {
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	//blue button pressed
	if((EXTI->PR1 & EXTI_PR1_PIF13) != 0){
 8000330:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <EXTI15_10_IRQHandler+0x44>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000338:	2b00      	cmp	r3, #0
 800033a:	d006      	beq.n	800034a <EXTI15_10_IRQHandler+0x1e>
//		delay(10000); //debounce
		button_pressed = 1;
 800033c:	4b0d      	ldr	r3, [pc, #52]	@ (8000374 <EXTI15_10_IRQHandler+0x48>)
 800033e:	2201      	movs	r2, #1
 8000340:	601a      	str	r2, [r3, #0]
		EXTI->PR1 = EXTI_PR1_PIF13; //clear pending flag
 8000342:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <EXTI15_10_IRQHandler+0x44>)
 8000344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000348:	615a      	str	r2, [r3, #20]
	}
	//button connected to PC10 pressed
	if((EXTI->PR1 & EXTI_PR1_PIF10) != 0){
 800034a:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <EXTI15_10_IRQHandler+0x44>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000352:	2b00      	cmp	r3, #0
 8000354:	d006      	beq.n	8000364 <EXTI15_10_IRQHandler+0x38>
//		delay(10000); //debounce
		button_pressed = 1;
 8000356:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <EXTI15_10_IRQHandler+0x48>)
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
		EXTI->PR1 = EXTI_PR1_PIF10; //clear pending flag
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <EXTI15_10_IRQHandler+0x44>)
 800035e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000362:	615a      	str	r2, [r3, #20]
	}

}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40010400 	.word	0x40010400
 8000374:	2000007c 	.word	0x2000007c

08000378 <buzzer_init>:

//constants
const unsigned int freq[] = {80, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 494, 523, 554, 587};
#define BUZZER_PIN 10;

void buzzer_init(){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	/*Description:
	 *
	 */
	enable_GPIO_clock(0); //enable GPIOA clock
 800037c:	2000      	movs	r0, #0
 800037e:	f000 f8bf 	bl	8000500 <enable_GPIO_clock>
	GPIOA->MODER &= ~GPIO_MODER_MODE10;
 8000382:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800038c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000390:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE10_0; // set PA10 to output
 8000392:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800039c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003a0:	6013      	str	r3, [r2, #0]
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <playnote>:

void playnote(struct note n) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	80b8      	strh	r0, [r7, #4]
	for (int i = 0; i < (n.duration * freq[n.notenum]) / 8; i++) {
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e028      	b.n	8000408 <playnote+0x60>
		GPIOA->ODR ^= 1 << BUZZER_PIN; // Toggle buzzer
 80003b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003c0:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 80003c4:	6153      	str	r3, [r2, #20]
		delay(500000 / freq[n.notenum]); // Half period
 80003c6:	793b      	ldrb	r3, [r7, #4]
 80003c8:	461a      	mov	r2, r3
 80003ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000434 <playnote+0x8c>)
 80003cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003d0:	4a19      	ldr	r2, [pc, #100]	@ (8000438 <playnote+0x90>)
 80003d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f842 	bl	8000460 <delay>
		GPIOA->ODR ^= 1 << BUZZER_PIN; // Toggle buzzer
 80003dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003e6:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 80003ea:	6153      	str	r3, [r2, #20]
		delay(500000 / freq[n.notenum]);
 80003ec:	793b      	ldrb	r3, [r7, #4]
 80003ee:	461a      	mov	r2, r3
 80003f0:	4b10      	ldr	r3, [pc, #64]	@ (8000434 <playnote+0x8c>)
 80003f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003f6:	4a10      	ldr	r2, [pc, #64]	@ (8000438 <playnote+0x90>)
 80003f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f82f 	bl	8000460 <delay>
	for (int i = 0; i < (n.duration * freq[n.notenum]) / 8; i++) {
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	3301      	adds	r3, #1
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	797b      	ldrb	r3, [r7, #5]
 800040a:	461a      	mov	r2, r3
 800040c:	793b      	ldrb	r3, [r7, #4]
 800040e:	4619      	mov	r1, r3
 8000410:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <playnote+0x8c>)
 8000412:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000416:	fb02 f303 	mul.w	r3, r2, r3
 800041a:	08da      	lsrs	r2, r3, #3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	429a      	cmp	r2, r3
 8000420:	d8c9      	bhi.n	80003b6 <playnote+0xe>
	}
	delay(0.5 * 125000); // Short delay between notes
 8000422:	f24f 4024 	movw	r0, #62500	@ 0xf424
 8000426:	f000 f81b 	bl	8000460 <delay>
}
 800042a:	bf00      	nop
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	08001558 	.word	0x08001558
 8000438:	0007a120 	.word	0x0007a120

0800043c <SysTick_Handler>:
#include<stdio.h>
#include<stdint.h>

volatile int time_delay = 0;

void SysTick_Handler(){
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	/*Description:
	 *
	 */
	if(time_delay > 0){
 8000440:	4b06      	ldr	r3, [pc, #24]	@ (800045c <SysTick_Handler+0x20>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	dd04      	ble.n	8000452 <SysTick_Handler+0x16>
		time_delay--; //decrement time delay
 8000448:	4b04      	ldr	r3, [pc, #16]	@ (800045c <SysTick_Handler+0x20>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	3b01      	subs	r3, #1
 800044e:	4a03      	ldr	r2, [pc, #12]	@ (800045c <SysTick_Handler+0x20>)
 8000450:	6013      	str	r3, [r2, #0]
	}
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	20000078 	.word	0x20000078

08000460 <delay>:

void delay(uint32_t nTime){
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	/*Description:
	 *
	 */
	time_delay = nTime;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a07      	ldr	r2, [pc, #28]	@ (8000488 <delay+0x28>)
 800046c:	6013      	str	r3, [r2, #0]
	while(time_delay > 0);
 800046e:	bf00      	nop
 8000470:	4b05      	ldr	r3, [pc, #20]	@ (8000488 <delay+0x28>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	dcfb      	bgt.n	8000470 <delay+0x10>
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	20000078 	.word	0x20000078

0800048c <main>:
volatile int timeout = 0;
volatile int beat = 0;
int last_count = 0;

int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	System_Clock_Init();
 8000490:	f000 f8be 	bl	8000610 <System_Clock_Init>
	SysTick_Init(80);
 8000494:	2050      	movs	r0, #80	@ 0x50
 8000496:	f000 f94f 	bl	8000738 <SysTick_Init>
	LED_init();
 800049a:	f7ff fe93 	bl	80001c4 <LED_init>
	button_init();
 800049e:	f7ff fed5 	bl	800024c <button_init>
	buzzer_init();
 80004a2:	f7ff ff69 	bl	8000378 <buzzer_init>
	TIM4_Init();
 80004a6:	f000 fa79 	bl	800099c <TIM4_Init>
	TIM3_Init();
 80004aa:	f000 fad9 	bl	8000a60 <TIM3_Init>


  /* Infinite loop */
  while (1){
	  //execute if button pressed
	  if(button_pressed){
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <main+0x64>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d00b      	beq.n	80004ce <main+0x42>
		  last_count = get_counterVal();
 80004b6:	f000 fa59 	bl	800096c <get_counterVal>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4a0d      	ldr	r2, [pc, #52]	@ (80004f4 <main+0x68>)
 80004be:	6013      	str	r3, [r2, #0]
		  reset_counterVal();
 80004c0:	f000 fa60 	bl	8000984 <reset_counterVal>
		  arr_set(last_count);
 80004c4:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <main+0x68>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 fb0b 	bl	8000ae4 <arr_set>
//		  toggle_LED();
//		  button_pressed = 0;
	  }

	  //execute if TIM3 overflows
	  if(button_pressed){
 80004ce:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <main+0x64>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0eb      	beq.n	80004ae <main+0x22>
	  		  //play note and flash led
	  		  toggle_LED();
 80004d6:	f7ff fe8c 	bl	80001f2 <toggle_LED>
	  		  playnote(bass);
 80004da:	4b07      	ldr	r3, [pc, #28]	@ (80004f8 <main+0x6c>)
 80004dc:	6818      	ldr	r0, [r3, #0]
 80004de:	f7ff ff63 	bl	80003a8 <playnote>
	  		  toggle_LED();
 80004e2:	f7ff fe86 	bl	80001f2 <toggle_LED>
	  		  beat = 0;
 80004e6:	4b05      	ldr	r3, [pc, #20]	@ (80004fc <main+0x70>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
	  if(button_pressed){
 80004ec:	e7df      	b.n	80004ae <main+0x22>
 80004ee:	bf00      	nop
 80004f0:	2000007c 	.word	0x2000007c
 80004f4:	20000088 	.word	0x20000088
 80004f8:	08001594 	.word	0x08001594
 80004fc:	20000084 	.word	0x20000084

08000500 <enable_GPIO_clock>:

#include "stm32l476xx.h"
#include<stdio.h>
#include<stdint.h>

void enable_GPIO_clock(int port){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
//takes integer between 0 and 7 and enables the corresponding GPIO port clock
//with A = 0, H = 7
	switch (port) {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b07      	cmp	r3, #7
 800050c:	d84a      	bhi.n	80005a4 <enable_GPIO_clock+0xa4>
 800050e:	a201      	add	r2, pc, #4	@ (adr r2, 8000514 <enable_GPIO_clock+0x14>)
 8000510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000514:	08000535 	.word	0x08000535
 8000518:	08000543 	.word	0x08000543
 800051c:	08000551 	.word	0x08000551
 8000520:	0800055f 	.word	0x0800055f
 8000524:	0800056d 	.word	0x0800056d
 8000528:	0800057b 	.word	0x0800057b
 800052c:	08000589 	.word	0x08000589
 8000530:	08000597 	.word	0x08000597
		case 0:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000534:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 8000536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000538:	4a1e      	ldr	r2, [pc, #120]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 8000540:	e034      	b.n	80005ac <enable_GPIO_clock+0xac>
		case 1:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000542:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	4a1b      	ldr	r2, [pc, #108]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 800054e:	e02d      	b.n	80005ac <enable_GPIO_clock+0xac>
		case 2:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000550:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 8000552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000554:	4a17      	ldr	r2, [pc, #92]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 800055c:	e026      	b.n	80005ac <enable_GPIO_clock+0xac>
		case 3:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 800055e:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	4a14      	ldr	r2, [pc, #80]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 800056a:	e01f      	b.n	80005ac <enable_GPIO_clock+0xac>
		case 4:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOEEN;
 800056c:	4b11      	ldr	r3, [pc, #68]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 800056e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000570:	4a10      	ldr	r2, [pc, #64]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 8000578:	e018      	b.n	80005ac <enable_GPIO_clock+0xac>
		case 5:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOFEN;
 800057a:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 8000580:	f043 0320 	orr.w	r3, r3, #32
 8000584:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 8000586:	e011      	b.n	80005ac <enable_GPIO_clock+0xac>
		case 6:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
 8000588:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 800058a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058c:	4a09      	ldr	r2, [pc, #36]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 800058e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000592:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 8000594:	e00a      	b.n	80005ac <enable_GPIO_clock+0xac>
		case 7:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOHEN;
 8000596:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <enable_GPIO_clock+0xb4>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 80005a2:	e003      	b.n	80005ac <enable_GPIO_clock+0xac>
		default:
			printf("enable_GPIO_clock error invalid input, please input lower case a-h \n");
 80005a4:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <enable_GPIO_clock+0xb8>)
 80005a6:	f000 fc15 	bl	8000dd4 <puts>
			break;
 80005aa:	bf00      	nop
	}
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	08001514 	.word	0x08001514

080005bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	6039      	str	r1, [r7, #0]
 80005c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db0a      	blt.n	80005e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	490c      	ldr	r1, [pc, #48]	@ (8000608 <__NVIC_SetPriority+0x4c>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	0112      	lsls	r2, r2, #4
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	440b      	add	r3, r1
 80005e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e4:	e00a      	b.n	80005fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4908      	ldr	r1, [pc, #32]	@ (800060c <__NVIC_SetPriority+0x50>)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	3b04      	subs	r3, #4
 80005f4:	0112      	lsls	r2, r2, #4
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	440b      	add	r3, r1
 80005fa:	761a      	strb	r2, [r3, #24]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000e100 	.word	0xe000e100
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <System_Clock_Init>:

#include "stm32l476xx.h"
#include<stdio.h>
#include<stdint.h>

void System_Clock_Init(){
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
/*	Description:
 *
 */

	uint32_t HSITrim = 16;
 8000616:	2310      	movs	r3, #16
 8000618:	607b      	str	r3, [r7, #4]

	//Set flash wait states
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 800061a:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <System_Clock_Init+0x120>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <System_Clock_Init+0x120>)
 8000620:	f023 0307 	bic.w	r3, r3, #7
 8000624:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_4WS;
 8000626:	4b42      	ldr	r3, [pc, #264]	@ (8000730 <System_Clock_Init+0x120>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a41      	ldr	r2, [pc, #260]	@ (8000730 <System_Clock_Init+0x120>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6013      	str	r3, [r2, #0]
	//Configure HSI
	RCC->CR |= RCC_CR_HSION;
 8000632:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <System_Clock_Init+0x124>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a3f      	ldr	r2, [pc, #252]	@ (8000734 <System_Clock_Init+0x124>)
 8000638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800063c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0); //wait for HSIRDY to be cleared
 800063e:	bf00      	nop
 8000640:	4b3c      	ldr	r3, [pc, #240]	@ (8000734 <System_Clock_Init+0x124>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f9      	beq.n	8000640 <System_Clock_Init+0x30>
	//Calibrate HSI16
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 800064c:	4b39      	ldr	r3, [pc, #228]	@ (8000734 <System_Clock_Init+0x124>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	4a38      	ldr	r2, [pc, #224]	@ (8000734 <System_Clock_Init+0x124>)
 8000652:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8000656:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << RCC_ICSCR_HSITRIM_Pos;
 8000658:	4b36      	ldr	r3, [pc, #216]	@ (8000734 <System_Clock_Init+0x124>)
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	061b      	lsls	r3, r3, #24
 8000660:	4934      	ldr	r1, [pc, #208]	@ (8000734 <System_Clock_Init+0x124>)
 8000662:	4313      	orrs	r3, r2
 8000664:	604b      	str	r3, [r1, #4]
	//Disable PLL
	RCC->CR &= ~RCC_CR_PLLON;
 8000666:	4b33      	ldr	r3, [pc, #204]	@ (8000734 <System_Clock_Init+0x124>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a32      	ldr	r2, [pc, #200]	@ (8000734 <System_Clock_Init+0x124>)
 800066c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000670:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY); //wait till PLLRDY is cleared
 8000672:	bf00      	nop
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <System_Clock_Init+0x124>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800067c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000680:	d0f8      	beq.n	8000674 <System_Clock_Init+0x64>
	//f(sys) = f(VCO)/PLLR
	//80MHz = 160/2; f(VCO) = 160 PLLR = 2
	//f(VCO) = f(PLL input) * (PLLN/PLLM)
	//160MHz = 16MHz * (PLLN/PLLM)
	//PLLN/PLLM = 10 = 20/2; PLLN = 20 PLLM = 2
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 8000682:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <System_Clock_Init+0x124>)
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	4a2b      	ldr	r2, [pc, #172]	@ (8000734 <System_Clock_Init+0x124>)
 8000688:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800068c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= 20U << RCC_PLLCFGR_PLLN_Pos; //plln to 20
 800068e:	4b29      	ldr	r3, [pc, #164]	@ (8000734 <System_Clock_Init+0x124>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	4a28      	ldr	r2, [pc, #160]	@ (8000734 <System_Clock_Init+0x124>)
 8000694:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000698:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 800069a:	4b26      	ldr	r3, [pc, #152]	@ (8000734 <System_Clock_Init+0x124>)
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	4a25      	ldr	r2, [pc, #148]	@ (8000734 <System_Clock_Init+0x124>)
 80006a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80006a4:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= 1U << RCC_PLLCFGR_PLLM_Pos; //pllm to 2
 80006a6:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <System_Clock_Init+0x124>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	4a22      	ldr	r2, [pc, #136]	@ (8000734 <System_Clock_Init+0x124>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR; //pllr to 2
 80006b2:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <System_Clock_Init+0x124>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000734 <System_Clock_Init+0x124>)
 80006b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80006bc:	60d3      	str	r3, [r2, #12]
	//set hsi as source for PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 80006be:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <System_Clock_Init+0x124>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <System_Clock_Init+0x124>)
 80006c4:	f023 0303 	bic.w	r3, r3, #3
 80006c8:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <System_Clock_Init+0x124>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	4a19      	ldr	r2, [pc, #100]	@ (8000734 <System_Clock_Init+0x124>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	60d3      	str	r3, [r2, #12]
	//Enable PLLR output
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;
 80006d6:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <System_Clock_Init+0x124>)
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	4a16      	ldr	r2, [pc, #88]	@ (8000734 <System_Clock_Init+0x124>)
 80006dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006e0:	60d3      	str	r3, [r2, #12]
	//Enable the PLL
	RCC->CR |= RCC_CR_PLLON;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <System_Clock_Init+0x124>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <System_Clock_Init+0x124>)
 80006e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006ec:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0); //wait till PLLRDY is cleared
 80006ee:	bf00      	nop
 80006f0:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <System_Clock_Init+0x124>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f9      	beq.n	80006f0 <System_Clock_Init+0xe0>
	//select PLL as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <System_Clock_Init+0x124>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	4a0c      	ldr	r2, [pc, #48]	@ (8000734 <System_Clock_Init+0x124>)
 8000702:	f023 0303 	bic.w	r3, r3, #3
 8000706:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <System_Clock_Init+0x124>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	4a09      	ldr	r2, [pc, #36]	@ (8000734 <System_Clock_Init+0x124>)
 800070e:	f043 0303 	orr.w	r3, r3, #3
 8000712:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); // wait till system clock is selected
 8000714:	bf00      	nop
 8000716:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <System_Clock_Init+0x124>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	f003 030c 	and.w	r3, r3, #12
 800071e:	2b0c      	cmp	r3, #12
 8000720:	d1f9      	bne.n	8000716 <System_Clock_Init+0x106>
}
 8000722:	bf00      	nop
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	40022000 	.word	0x40022000
 8000734:	40021000 	.word	0x40021000

08000738 <SysTick_Init>:

void SysTick_Init(int ticks){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	/*Description:
	 *
	 */

	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; // Disable SysTick
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <SysTick_Init+0x58>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <SysTick_Init+0x58>)
 8000746:	f023 0301 	bic.w	r3, r3, #1
 800074a:	6013      	str	r3, [r2, #0]
	SysTick->LOAD = ticks - 1; // Set reload register
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	1e5a      	subs	r2, r3, #1
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <SysTick_Init+0x58>)
 8000752:	605a      	str	r2, [r3, #4]
	// Set interrupt priority of SysTick to least urgency (i.e., largest priority value)
	NVIC_SetPriority (SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
 8000754:	210f      	movs	r1, #15
 8000756:	f04f 30ff 	mov.w	r0, #4294967295
 800075a:	f7ff ff2f 	bl	80005bc <__NVIC_SetPriority>
	SysTick->VAL = 0; // Reset the SysTick counter value
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <SysTick_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
	// Select processor clock to internal clock
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <SysTick_Init+0x58>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a09      	ldr	r2, [pc, #36]	@ (8000790 <SysTick_Init+0x58>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6013      	str	r3, [r2, #0]
	// Enables SysTick interrupt
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <SysTick_Init+0x58>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a06      	ldr	r2, [pc, #24]	@ (8000790 <SysTick_Init+0x58>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	6013      	str	r3, [r2, #0]
	// Enable SysTick
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800077c:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <SysTick_Init+0x58>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a03      	ldr	r2, [pc, #12]	@ (8000790 <SysTick_Init+0x58>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	e000e010 	.word	0xe000e010

08000794 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e00a      	b.n	80007bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007a6:	f3af 8000 	nop.w
 80007aa:	4601      	mov	r1, r0
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	60ba      	str	r2, [r7, #8]
 80007b2:	b2ca      	uxtb	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dbf0      	blt.n	80007a6 <_read+0x12>
  }

  return len;
 80007c4:	687b      	ldr	r3, [r7, #4]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	e009      	b.n	80007f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbf1      	blt.n	80007e0 <_write+0x12>
  }
  return len;
 80007fc:	687b      	ldr	r3, [r7, #4]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <_close>:

int _close(int file)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000812:	4618      	mov	r0, r3
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800082e:	605a      	str	r2, [r3, #4]
  return 0;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <_isatty>:

int _isatty(int file)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000878:	4a14      	ldr	r2, [pc, #80]	@ (80008cc <_sbrk+0x5c>)
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <_sbrk+0x60>)
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800088c:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <_sbrk+0x64>)
 800088e:	4a12      	ldr	r2, [pc, #72]	@ (80008d8 <_sbrk+0x68>)
 8000890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	429a      	cmp	r2, r3
 800089e:	d207      	bcs.n	80008b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a0:	f000 fbc6 	bl	8001030 <__errno>
 80008a4:	4603      	mov	r3, r0
 80008a6:	220c      	movs	r2, #12
 80008a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	e009      	b.n	80008c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b6:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	4a05      	ldr	r2, [pc, #20]	@ (80008d4 <_sbrk+0x64>)
 80008c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20018000 	.word	0x20018000
 80008d0:	00000400 	.word	0x00000400
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	200001e0 	.word	0x200001e0

080008dc <__NVIC_EnableIRQ>:
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db0b      	blt.n	8000906 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4907      	ldr	r1, [pc, #28]	@ (8000914 <__NVIC_EnableIRQ+0x38>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100

08000918 <__NVIC_SetPriority>:
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	db0a      	blt.n	8000942 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	b2da      	uxtb	r2, r3
 8000930:	490c      	ldr	r1, [pc, #48]	@ (8000964 <__NVIC_SetPriority+0x4c>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	0112      	lsls	r2, r2, #4
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	440b      	add	r3, r1
 800093c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000940:	e00a      	b.n	8000958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4908      	ldr	r1, [pc, #32]	@ (8000968 <__NVIC_SetPriority+0x50>)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	f003 030f 	and.w	r3, r3, #15
 800094e:	3b04      	subs	r3, #4
 8000950:	0112      	lsls	r2, r2, #4
 8000952:	b2d2      	uxtb	r2, r2
 8000954:	440b      	add	r3, r1
 8000956:	761a      	strb	r2, [r3, #24]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000e100 	.word	0xe000e100
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <get_counterVal>:

extern volatile int timeout;
extern volatile int beat;

// Function to read the current value of the counter
int get_counterVal(){
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	return TIM4->CNT;		// Read the current counter value
 8000970:	4b03      	ldr	r3, [pc, #12]	@ (8000980 <get_counterVal+0x14>)
 8000972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40000800 	.word	0x40000800

08000984 <reset_counterVal>:

// Function to reset the counter value to 0
void reset_counterVal(){
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
	TIM4->CNT = 0;		// Reset the counter value to 0
 8000988:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <reset_counterVal+0x14>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40000800 	.word	0x40000800

0800099c <TIM4_Init>:

// Simple 1kHz up counting timer (input)
void TIM4_Init(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;		// Enable the TIM4 clock
 80009a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <TIM4_Init+0x78>)
 80009a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <TIM4_Init+0x78>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6593      	str	r3, [r2, #88]	@ 0x58

	TIM4->CR1 &= ~TIM_CR1_CMS;					// Set the edge-aligned mode
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <TIM4_Init+0x7c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <TIM4_Init+0x7c>)
 80009b2:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80009b6:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~TIM_CR1_DIR;					// Up-counting mode (default)
 80009b8:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <TIM4_Init+0x7c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a16      	ldr	r2, [pc, #88]	@ (8000a18 <TIM4_Init+0x7c>)
 80009be:	f023 0310 	bic.w	r3, r3, #16
 80009c2:	6013      	str	r3, [r2, #0]

	// Set the PSC and ARR fields to achieve a 1kHz output
	TIM4->PSC = 79000;		// Pre-scaler to divide 16 MHz clock to 1 kHz
 80009c4:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <TIM4_Init+0x7c>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	@ (8000a1c <TIM4_Init+0x80>)
 80009c8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 2999;		// Auto-reload for 3-second interrupt
 80009ca:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <TIM4_Init+0x7c>)
 80009cc:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80009d0:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM4->CR2 &= ~TIM_CR2_MMS;			// No master mode output
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <TIM4_Init+0x7c>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <TIM4_Init+0x7c>)
 80009d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80009dc:	6053      	str	r3, [r2, #4]

	TIM4->CCER = 0;						// Disable all output channels
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <TIM4_Init+0x7c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
	TIM4->CCMR1 = 0;					// Reset capture/compare mode registers
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <TIM4_Init+0x7c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]

	TIM4->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <TIM4_Init+0x7c>)
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <TIM4_Init+0x7c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM4_IRQn, 1);			// Set interrupt priority
 80009f6:	2101      	movs	r1, #1
 80009f8:	201e      	movs	r0, #30
 80009fa:	f7ff ff8d 	bl	8000918 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);				// Enable TIM4 interrupt in NVIC
 80009fe:	201e      	movs	r0, #30
 8000a00:	f7ff ff6c 	bl	80008dc <__NVIC_EnableIRQ>

	// Enable the timer
	TIM4->CR1 |= TIM_CR1_CEN;
 8000a04:	4b04      	ldr	r3, [pc, #16]	@ (8000a18 <TIM4_Init+0x7c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a03      	ldr	r2, [pc, #12]	@ (8000a18 <TIM4_Init+0x7c>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40000800 	.word	0x40000800
 8000a1c:	00013498 	.word	0x00013498

08000a20 <TIM4_IRQHandler>:

// Interrupt handler code for the counter reaching 3 seconds
void TIM4_IRQHandler(void){
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF){		// Check if update interrupt flag
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <TIM4_IRQHandler+0x38>)
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00e      	beq.n	8000a4e <TIM4_IRQHandler+0x2e>
		TIM4->SR &= ~TIM_SR_UIF;	// Clear the interrupt flag
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <TIM4_IRQHandler+0x38>)
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <TIM4_IRQHandler+0x38>)
 8000a36:	f023 0301 	bic.w	r3, r3, #1
 8000a3a:	6113      	str	r3, [r2, #16]
		TIM4->CR1 &= ~TIM_CR1_CEN;	// Disable the timer
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <TIM4_IRQHandler+0x38>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <TIM4_IRQHandler+0x38>)
 8000a42:	f023 0301 	bic.w	r3, r3, #1
 8000a46:	6013      	str	r3, [r2, #0]
		timeout = 1;				// Set flag for timer disabled
 8000a48:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <TIM4_IRQHandler+0x3c>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]
	}
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	40000800 	.word	0x40000800
 8000a5c:	20000080 	.word	0x20000080

08000a60 <TIM3_Init>:

// Output timer to trigger buzzer
void TIM3_Init(void){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;		// Enable the TIM3 clock
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <TIM3_Init+0x78>)
 8000a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad8 <TIM3_Init+0x78>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	6593      	str	r3, [r2, #88]	@ 0x58

	TIM3->CR1 &= ~TIM_CR1_CMS;					// Set the edge-aligned mode
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <TIM3_Init+0x7c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <TIM3_Init+0x7c>)
 8000a76:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000a7a:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~TIM_CR1_DIR;					// Up-counting mode (default)
 8000a7c:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <TIM3_Init+0x7c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a16      	ldr	r2, [pc, #88]	@ (8000adc <TIM3_Init+0x7c>)
 8000a82:	f023 0310 	bic.w	r3, r3, #16
 8000a86:	6013      	str	r3, [r2, #0]

	// Set the PSC and ARR fields to achieve a 1kHz output
	TIM3->PSC = 79000;		// Pre-scaler to divide 16 MHz clock to 1 kHz
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <TIM3_Init+0x7c>)
 8000a8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ae0 <TIM3_Init+0x80>)
 8000a8c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 2999;		// Auto-reload for 3-second interrupt
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <TIM3_Init+0x7c>)
 8000a90:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000a94:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM3->CR2 &= ~TIM_CR2_MMS;			// No master mode output
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <TIM3_Init+0x7c>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <TIM3_Init+0x7c>)
 8000a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000aa0:	6053      	str	r3, [r2, #4]

	TIM3->CCER = 0;						// Disable all output channels
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <TIM3_Init+0x7c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
	TIM3->CCMR1 = 0;					// Reset capture/compare mode registers
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <TIM3_Init+0x7c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]

	TIM3->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <TIM3_Init+0x7c>)
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <TIM3_Init+0x7c>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM3_IRQn, 1);			// Set interrupt priority
 8000aba:	2101      	movs	r1, #1
 8000abc:	201d      	movs	r0, #29
 8000abe:	f7ff ff2b 	bl	8000918 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);				// Enable TIM3 interrupt in NVIC
 8000ac2:	201d      	movs	r0, #29
 8000ac4:	f7ff ff0a 	bl	80008dc <__NVIC_EnableIRQ>

	// Enable the timer
	TIM3->CR1 |= TIM_CR1_CEN;
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <TIM3_Init+0x7c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a03      	ldr	r2, [pc, #12]	@ (8000adc <TIM3_Init+0x7c>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40000400 	.word	0x40000400
 8000ae0:	00013498 	.word	0x00013498

08000ae4 <arr_set>:

void arr_set(int s){
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <arr_set+0x34>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a09      	ldr	r2, [pc, #36]	@ (8000b18 <arr_set+0x34>)
 8000af2:	f023 0301 	bic.w	r3, r3, #1
 8000af6:	6013      	str	r3, [r2, #0]
	TIM3->ARR = s;
 8000af8:	4a07      	ldr	r2, [pc, #28]	@ (8000b18 <arr_set+0x34>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM3->CR1 |= TIM_CR1_CEN;
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <arr_set+0x34>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a05      	ldr	r2, [pc, #20]	@ (8000b18 <arr_set+0x34>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6013      	str	r3, [r2, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40000400 	.word	0x40000400

08000b1c <TIM3_IRQHandler>:

// Interrupt handler code to set beat = 1 on overflow
void TIM3_IRQHandler(void){
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_UIF){		// Check if update interrupt flag
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <TIM3_IRQHandler+0x2c>)
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <TIM3_IRQHandler+0x22>
		TIM3->SR &= ~TIM_SR_UIF;	// Clear the interrupt flag
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <TIM3_IRQHandler+0x2c>)
 8000b2e:	691b      	ldr	r3, [r3, #16]
 8000b30:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <TIM3_IRQHandler+0x2c>)
 8000b32:	f023 0301 	bic.w	r3, r3, #1
 8000b36:	6113      	str	r3, [r2, #16]
		beat = 1;
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <TIM3_IRQHandler+0x30>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
		// Set ARR to get_counterVal here? or assign in timer init?
	}
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	40000400 	.word	0x40000400
 8000b4c:	20000084 	.word	0x20000084

08000b50 <Reset_Handler>:
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <LoopForever+0x2>)
 8000b52:	4685      	mov	sp, r0
 8000b54:	f3af 8000 	nop.w
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <LoopForever+0x6>)
 8000b5a:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <LoopForever+0xa>)
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <LoopForever+0xe>)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:
 8000b62:	58d4      	ldr	r4, [r2, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:
 8000b68:	18c4      	adds	r4, r0, r3
 8000b6a:	428c      	cmp	r4, r1
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <LoopForever+0x12>)
 8000b70:	4c0a      	ldr	r4, [pc, #40]	@ (8000b9c <LoopForever+0x16>)
 8000b72:	2300      	movs	r3, #0
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:
 8000b7a:	42a2      	cmp	r2, r4
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>
 8000b7e:	f000 fa5d 	bl	800103c <__libc_init_array>
 8000b82:	f7ff fc83 	bl	800048c <main>

08000b86 <LoopForever>:
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
 8000b88:	20018000 	.word	0x20018000
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	2000005c 	.word	0x2000005c
 8000b94:	080015a0 	.word	0x080015a0
 8000b98:	2000005c 	.word	0x2000005c
 8000b9c:	200001dc 	.word	0x200001dc

08000ba0 <ADC1_2_IRQHandler>:
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>
	...

08000ba4 <std>:
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	b510      	push	{r4, lr}
 8000ba8:	4604      	mov	r4, r0
 8000baa:	e9c0 3300 	strd	r3, r3, [r0]
 8000bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000bb2:	6083      	str	r3, [r0, #8]
 8000bb4:	8181      	strh	r1, [r0, #12]
 8000bb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000bb8:	81c2      	strh	r2, [r0, #14]
 8000bba:	6183      	str	r3, [r0, #24]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	2208      	movs	r2, #8
 8000bc0:	305c      	adds	r0, #92	@ 0x5c
 8000bc2:	f000 f9e7 	bl	8000f94 <memset>
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <std+0x58>)
 8000bc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8000bca:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <std+0x5c>)
 8000bcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000bce:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <std+0x60>)
 8000bd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <std+0x64>)
 8000bd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <std+0x68>)
 8000bd8:	6224      	str	r4, [r4, #32]
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	d006      	beq.n	8000bec <std+0x48>
 8000bde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000be2:	4294      	cmp	r4, r2
 8000be4:	d002      	beq.n	8000bec <std+0x48>
 8000be6:	33d0      	adds	r3, #208	@ 0xd0
 8000be8:	429c      	cmp	r4, r3
 8000bea:	d105      	bne.n	8000bf8 <std+0x54>
 8000bec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bf4:	f000 ba46 	b.w	8001084 <__retarget_lock_init_recursive>
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	bf00      	nop
 8000bfc:	08000de5 	.word	0x08000de5
 8000c00:	08000e07 	.word	0x08000e07
 8000c04:	08000e3f 	.word	0x08000e3f
 8000c08:	08000e63 	.word	0x08000e63
 8000c0c:	20000090 	.word	0x20000090

08000c10 <stdio_exit_handler>:
 8000c10:	4a02      	ldr	r2, [pc, #8]	@ (8000c1c <stdio_exit_handler+0xc>)
 8000c12:	4903      	ldr	r1, [pc, #12]	@ (8000c20 <stdio_exit_handler+0x10>)
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <stdio_exit_handler+0x14>)
 8000c16:	f000 b869 	b.w	8000cec <_fwalk_sglue>
 8000c1a:	bf00      	nop
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	08001385 	.word	0x08001385
 8000c24:	20000010 	.word	0x20000010

08000c28 <cleanup_stdio>:
 8000c28:	6841      	ldr	r1, [r0, #4]
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <cleanup_stdio+0x34>)
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	b510      	push	{r4, lr}
 8000c30:	4604      	mov	r4, r0
 8000c32:	d001      	beq.n	8000c38 <cleanup_stdio+0x10>
 8000c34:	f000 fba6 	bl	8001384 <_fflush_r>
 8000c38:	68a1      	ldr	r1, [r4, #8]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <cleanup_stdio+0x38>)
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d002      	beq.n	8000c46 <cleanup_stdio+0x1e>
 8000c40:	4620      	mov	r0, r4
 8000c42:	f000 fb9f 	bl	8001384 <_fflush_r>
 8000c46:	68e1      	ldr	r1, [r4, #12]
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <cleanup_stdio+0x3c>)
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d004      	beq.n	8000c58 <cleanup_stdio+0x30>
 8000c4e:	4620      	mov	r0, r4
 8000c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c54:	f000 bb96 	b.w	8001384 <_fflush_r>
 8000c58:	bd10      	pop	{r4, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000090 	.word	0x20000090
 8000c60:	200000f8 	.word	0x200000f8
 8000c64:	20000160 	.word	0x20000160

08000c68 <global_stdio_init.part.0>:
 8000c68:	b510      	push	{r4, lr}
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <global_stdio_init.part.0+0x30>)
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8000c9c <global_stdio_init.part.0+0x34>)
 8000c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca0 <global_stdio_init.part.0+0x38>)
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	4620      	mov	r0, r4
 8000c74:	2200      	movs	r2, #0
 8000c76:	2104      	movs	r1, #4
 8000c78:	f7ff ff94 	bl	8000ba4 <std>
 8000c7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000c80:	2201      	movs	r2, #1
 8000c82:	2109      	movs	r1, #9
 8000c84:	f7ff ff8e 	bl	8000ba4 <std>
 8000c88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c92:	2112      	movs	r1, #18
 8000c94:	f7ff bf86 	b.w	8000ba4 <std>
 8000c98:	200001c8 	.word	0x200001c8
 8000c9c:	20000090 	.word	0x20000090
 8000ca0:	08000c11 	.word	0x08000c11

08000ca4 <__sfp_lock_acquire>:
 8000ca4:	4801      	ldr	r0, [pc, #4]	@ (8000cac <__sfp_lock_acquire+0x8>)
 8000ca6:	f000 b9ee 	b.w	8001086 <__retarget_lock_acquire_recursive>
 8000caa:	bf00      	nop
 8000cac:	200001d1 	.word	0x200001d1

08000cb0 <__sfp_lock_release>:
 8000cb0:	4801      	ldr	r0, [pc, #4]	@ (8000cb8 <__sfp_lock_release+0x8>)
 8000cb2:	f000 b9e9 	b.w	8001088 <__retarget_lock_release_recursive>
 8000cb6:	bf00      	nop
 8000cb8:	200001d1 	.word	0x200001d1

08000cbc <__sinit>:
 8000cbc:	b510      	push	{r4, lr}
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fff0 	bl	8000ca4 <__sfp_lock_acquire>
 8000cc4:	6a23      	ldr	r3, [r4, #32]
 8000cc6:	b11b      	cbz	r3, 8000cd0 <__sinit+0x14>
 8000cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ccc:	f7ff bff0 	b.w	8000cb0 <__sfp_lock_release>
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <__sinit+0x28>)
 8000cd2:	6223      	str	r3, [r4, #32]
 8000cd4:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <__sinit+0x2c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1f5      	bne.n	8000cc8 <__sinit+0xc>
 8000cdc:	f7ff ffc4 	bl	8000c68 <global_stdio_init.part.0>
 8000ce0:	e7f2      	b.n	8000cc8 <__sinit+0xc>
 8000ce2:	bf00      	nop
 8000ce4:	08000c29 	.word	0x08000c29
 8000ce8:	200001c8 	.word	0x200001c8

08000cec <_fwalk_sglue>:
 8000cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cf0:	4607      	mov	r7, r0
 8000cf2:	4688      	mov	r8, r1
 8000cf4:	4614      	mov	r4, r2
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8000d00:	d505      	bpl.n	8000d0e <_fwalk_sglue+0x22>
 8000d02:	6824      	ldr	r4, [r4, #0]
 8000d04:	2c00      	cmp	r4, #0
 8000d06:	d1f7      	bne.n	8000cf8 <_fwalk_sglue+0xc>
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d0e:	89ab      	ldrh	r3, [r5, #12]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d907      	bls.n	8000d24 <_fwalk_sglue+0x38>
 8000d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	d003      	beq.n	8000d24 <_fwalk_sglue+0x38>
 8000d1c:	4629      	mov	r1, r5
 8000d1e:	4638      	mov	r0, r7
 8000d20:	47c0      	blx	r8
 8000d22:	4306      	orrs	r6, r0
 8000d24:	3568      	adds	r5, #104	@ 0x68
 8000d26:	e7e9      	b.n	8000cfc <_fwalk_sglue+0x10>

08000d28 <_puts_r>:
 8000d28:	6a03      	ldr	r3, [r0, #32]
 8000d2a:	b570      	push	{r4, r5, r6, lr}
 8000d2c:	6884      	ldr	r4, [r0, #8]
 8000d2e:	4605      	mov	r5, r0
 8000d30:	460e      	mov	r6, r1
 8000d32:	b90b      	cbnz	r3, 8000d38 <_puts_r+0x10>
 8000d34:	f7ff ffc2 	bl	8000cbc <__sinit>
 8000d38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d3a:	07db      	lsls	r3, r3, #31
 8000d3c:	d405      	bmi.n	8000d4a <_puts_r+0x22>
 8000d3e:	89a3      	ldrh	r3, [r4, #12]
 8000d40:	0598      	lsls	r0, r3, #22
 8000d42:	d402      	bmi.n	8000d4a <_puts_r+0x22>
 8000d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d46:	f000 f99e 	bl	8001086 <__retarget_lock_acquire_recursive>
 8000d4a:	89a3      	ldrh	r3, [r4, #12]
 8000d4c:	0719      	lsls	r1, r3, #28
 8000d4e:	d502      	bpl.n	8000d56 <_puts_r+0x2e>
 8000d50:	6923      	ldr	r3, [r4, #16]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d135      	bne.n	8000dc2 <_puts_r+0x9a>
 8000d56:	4621      	mov	r1, r4
 8000d58:	4628      	mov	r0, r5
 8000d5a:	f000 f8c5 	bl	8000ee8 <__swsetup_r>
 8000d5e:	b380      	cbz	r0, 8000dc2 <_puts_r+0x9a>
 8000d60:	f04f 35ff 	mov.w	r5, #4294967295
 8000d64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d66:	07da      	lsls	r2, r3, #31
 8000d68:	d405      	bmi.n	8000d76 <_puts_r+0x4e>
 8000d6a:	89a3      	ldrh	r3, [r4, #12]
 8000d6c:	059b      	lsls	r3, r3, #22
 8000d6e:	d402      	bmi.n	8000d76 <_puts_r+0x4e>
 8000d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d72:	f000 f989 	bl	8001088 <__retarget_lock_release_recursive>
 8000d76:	4628      	mov	r0, r5
 8000d78:	bd70      	pop	{r4, r5, r6, pc}
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	da04      	bge.n	8000d88 <_puts_r+0x60>
 8000d7e:	69a2      	ldr	r2, [r4, #24]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dc17      	bgt.n	8000db4 <_puts_r+0x8c>
 8000d84:	290a      	cmp	r1, #10
 8000d86:	d015      	beq.n	8000db4 <_puts_r+0x8c>
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	6022      	str	r2, [r4, #0]
 8000d8e:	7019      	strb	r1, [r3, #0]
 8000d90:	68a3      	ldr	r3, [r4, #8]
 8000d92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000d96:	3b01      	subs	r3, #1
 8000d98:	60a3      	str	r3, [r4, #8]
 8000d9a:	2900      	cmp	r1, #0
 8000d9c:	d1ed      	bne.n	8000d7a <_puts_r+0x52>
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	da11      	bge.n	8000dc6 <_puts_r+0x9e>
 8000da2:	4622      	mov	r2, r4
 8000da4:	210a      	movs	r1, #10
 8000da6:	4628      	mov	r0, r5
 8000da8:	f000 f85f 	bl	8000e6a <__swbuf_r>
 8000dac:	3001      	adds	r0, #1
 8000dae:	d0d7      	beq.n	8000d60 <_puts_r+0x38>
 8000db0:	250a      	movs	r5, #10
 8000db2:	e7d7      	b.n	8000d64 <_puts_r+0x3c>
 8000db4:	4622      	mov	r2, r4
 8000db6:	4628      	mov	r0, r5
 8000db8:	f000 f857 	bl	8000e6a <__swbuf_r>
 8000dbc:	3001      	adds	r0, #1
 8000dbe:	d1e7      	bne.n	8000d90 <_puts_r+0x68>
 8000dc0:	e7ce      	b.n	8000d60 <_puts_r+0x38>
 8000dc2:	3e01      	subs	r6, #1
 8000dc4:	e7e4      	b.n	8000d90 <_puts_r+0x68>
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	6022      	str	r2, [r4, #0]
 8000dcc:	220a      	movs	r2, #10
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e7ee      	b.n	8000db0 <_puts_r+0x88>
	...

08000dd4 <puts>:
 8000dd4:	4b02      	ldr	r3, [pc, #8]	@ (8000de0 <puts+0xc>)
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	f7ff bfa5 	b.w	8000d28 <_puts_r>
 8000dde:	bf00      	nop
 8000de0:	2000000c 	.word	0x2000000c

08000de4 <__sread>:
 8000de4:	b510      	push	{r4, lr}
 8000de6:	460c      	mov	r4, r1
 8000de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dec:	f000 f8fc 	bl	8000fe8 <_read_r>
 8000df0:	2800      	cmp	r0, #0
 8000df2:	bfab      	itete	ge
 8000df4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000df6:	89a3      	ldrhlt	r3, [r4, #12]
 8000df8:	181b      	addge	r3, r3, r0
 8000dfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000dfe:	bfac      	ite	ge
 8000e00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000e02:	81a3      	strhlt	r3, [r4, #12]
 8000e04:	bd10      	pop	{r4, pc}

08000e06 <__swrite>:
 8000e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e0a:	461f      	mov	r7, r3
 8000e0c:	898b      	ldrh	r3, [r1, #12]
 8000e0e:	05db      	lsls	r3, r3, #23
 8000e10:	4605      	mov	r5, r0
 8000e12:	460c      	mov	r4, r1
 8000e14:	4616      	mov	r6, r2
 8000e16:	d505      	bpl.n	8000e24 <__swrite+0x1e>
 8000e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f000 f8d0 	bl	8000fc4 <_lseek_r>
 8000e24:	89a3      	ldrh	r3, [r4, #12]
 8000e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e2e:	81a3      	strh	r3, [r4, #12]
 8000e30:	4632      	mov	r2, r6
 8000e32:	463b      	mov	r3, r7
 8000e34:	4628      	mov	r0, r5
 8000e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e3a:	f000 b8e7 	b.w	800100c <_write_r>

08000e3e <__sseek>:
 8000e3e:	b510      	push	{r4, lr}
 8000e40:	460c      	mov	r4, r1
 8000e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e46:	f000 f8bd 	bl	8000fc4 <_lseek_r>
 8000e4a:	1c43      	adds	r3, r0, #1
 8000e4c:	89a3      	ldrh	r3, [r4, #12]
 8000e4e:	bf15      	itete	ne
 8000e50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e5a:	81a3      	strheq	r3, [r4, #12]
 8000e5c:	bf18      	it	ne
 8000e5e:	81a3      	strhne	r3, [r4, #12]
 8000e60:	bd10      	pop	{r4, pc}

08000e62 <__sclose>:
 8000e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e66:	f000 b89d 	b.w	8000fa4 <_close_r>

08000e6a <__swbuf_r>:
 8000e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6c:	460e      	mov	r6, r1
 8000e6e:	4614      	mov	r4, r2
 8000e70:	4605      	mov	r5, r0
 8000e72:	b118      	cbz	r0, 8000e7c <__swbuf_r+0x12>
 8000e74:	6a03      	ldr	r3, [r0, #32]
 8000e76:	b90b      	cbnz	r3, 8000e7c <__swbuf_r+0x12>
 8000e78:	f7ff ff20 	bl	8000cbc <__sinit>
 8000e7c:	69a3      	ldr	r3, [r4, #24]
 8000e7e:	60a3      	str	r3, [r4, #8]
 8000e80:	89a3      	ldrh	r3, [r4, #12]
 8000e82:	071a      	lsls	r2, r3, #28
 8000e84:	d501      	bpl.n	8000e8a <__swbuf_r+0x20>
 8000e86:	6923      	ldr	r3, [r4, #16]
 8000e88:	b943      	cbnz	r3, 8000e9c <__swbuf_r+0x32>
 8000e8a:	4621      	mov	r1, r4
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	f000 f82b 	bl	8000ee8 <__swsetup_r>
 8000e92:	b118      	cbz	r0, 8000e9c <__swbuf_r+0x32>
 8000e94:	f04f 37ff 	mov.w	r7, #4294967295
 8000e98:	4638      	mov	r0, r7
 8000e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	6922      	ldr	r2, [r4, #16]
 8000ea0:	1a98      	subs	r0, r3, r2
 8000ea2:	6963      	ldr	r3, [r4, #20]
 8000ea4:	b2f6      	uxtb	r6, r6
 8000ea6:	4283      	cmp	r3, r0
 8000ea8:	4637      	mov	r7, r6
 8000eaa:	dc05      	bgt.n	8000eb8 <__swbuf_r+0x4e>
 8000eac:	4621      	mov	r1, r4
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f000 fa68 	bl	8001384 <_fflush_r>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d1ed      	bne.n	8000e94 <__swbuf_r+0x2a>
 8000eb8:	68a3      	ldr	r3, [r4, #8]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	60a3      	str	r3, [r4, #8]
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	6022      	str	r2, [r4, #0]
 8000ec4:	701e      	strb	r6, [r3, #0]
 8000ec6:	6962      	ldr	r2, [r4, #20]
 8000ec8:	1c43      	adds	r3, r0, #1
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d004      	beq.n	8000ed8 <__swbuf_r+0x6e>
 8000ece:	89a3      	ldrh	r3, [r4, #12]
 8000ed0:	07db      	lsls	r3, r3, #31
 8000ed2:	d5e1      	bpl.n	8000e98 <__swbuf_r+0x2e>
 8000ed4:	2e0a      	cmp	r6, #10
 8000ed6:	d1df      	bne.n	8000e98 <__swbuf_r+0x2e>
 8000ed8:	4621      	mov	r1, r4
 8000eda:	4628      	mov	r0, r5
 8000edc:	f000 fa52 	bl	8001384 <_fflush_r>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d0d9      	beq.n	8000e98 <__swbuf_r+0x2e>
 8000ee4:	e7d6      	b.n	8000e94 <__swbuf_r+0x2a>
	...

08000ee8 <__swsetup_r>:
 8000ee8:	b538      	push	{r3, r4, r5, lr}
 8000eea:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <__swsetup_r+0xa8>)
 8000eec:	4605      	mov	r5, r0
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	b118      	cbz	r0, 8000efc <__swsetup_r+0x14>
 8000ef4:	6a03      	ldr	r3, [r0, #32]
 8000ef6:	b90b      	cbnz	r3, 8000efc <__swsetup_r+0x14>
 8000ef8:	f7ff fee0 	bl	8000cbc <__sinit>
 8000efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f00:	0719      	lsls	r1, r3, #28
 8000f02:	d422      	bmi.n	8000f4a <__swsetup_r+0x62>
 8000f04:	06da      	lsls	r2, r3, #27
 8000f06:	d407      	bmi.n	8000f18 <__swsetup_r+0x30>
 8000f08:	2209      	movs	r2, #9
 8000f0a:	602a      	str	r2, [r5, #0]
 8000f0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f10:	81a3      	strh	r3, [r4, #12]
 8000f12:	f04f 30ff 	mov.w	r0, #4294967295
 8000f16:	e033      	b.n	8000f80 <__swsetup_r+0x98>
 8000f18:	0758      	lsls	r0, r3, #29
 8000f1a:	d512      	bpl.n	8000f42 <__swsetup_r+0x5a>
 8000f1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000f1e:	b141      	cbz	r1, 8000f32 <__swsetup_r+0x4a>
 8000f20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000f24:	4299      	cmp	r1, r3
 8000f26:	d002      	beq.n	8000f2e <__swsetup_r+0x46>
 8000f28:	4628      	mov	r0, r5
 8000f2a:	f000 f8af 	bl	800108c <_free_r>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	6363      	str	r3, [r4, #52]	@ 0x34
 8000f32:	89a3      	ldrh	r3, [r4, #12]
 8000f34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000f38:	81a3      	strh	r3, [r4, #12]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	6063      	str	r3, [r4, #4]
 8000f3e:	6923      	ldr	r3, [r4, #16]
 8000f40:	6023      	str	r3, [r4, #0]
 8000f42:	89a3      	ldrh	r3, [r4, #12]
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	81a3      	strh	r3, [r4, #12]
 8000f4a:	6923      	ldr	r3, [r4, #16]
 8000f4c:	b94b      	cbnz	r3, 8000f62 <__swsetup_r+0x7a>
 8000f4e:	89a3      	ldrh	r3, [r4, #12]
 8000f50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f58:	d003      	beq.n	8000f62 <__swsetup_r+0x7a>
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	f000 fa5f 	bl	8001420 <__smakebuf_r>
 8000f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f66:	f013 0201 	ands.w	r2, r3, #1
 8000f6a:	d00a      	beq.n	8000f82 <__swsetup_r+0x9a>
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60a2      	str	r2, [r4, #8]
 8000f70:	6962      	ldr	r2, [r4, #20]
 8000f72:	4252      	negs	r2, r2
 8000f74:	61a2      	str	r2, [r4, #24]
 8000f76:	6922      	ldr	r2, [r4, #16]
 8000f78:	b942      	cbnz	r2, 8000f8c <__swsetup_r+0xa4>
 8000f7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000f7e:	d1c5      	bne.n	8000f0c <__swsetup_r+0x24>
 8000f80:	bd38      	pop	{r3, r4, r5, pc}
 8000f82:	0799      	lsls	r1, r3, #30
 8000f84:	bf58      	it	pl
 8000f86:	6962      	ldrpl	r2, [r4, #20]
 8000f88:	60a2      	str	r2, [r4, #8]
 8000f8a:	e7f4      	b.n	8000f76 <__swsetup_r+0x8e>
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	e7f7      	b.n	8000f80 <__swsetup_r+0x98>
 8000f90:	2000000c 	.word	0x2000000c

08000f94 <memset>:
 8000f94:	4402      	add	r2, r0
 8000f96:	4603      	mov	r3, r0
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d100      	bne.n	8000f9e <memset+0xa>
 8000f9c:	4770      	bx	lr
 8000f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8000fa2:	e7f9      	b.n	8000f98 <memset+0x4>

08000fa4 <_close_r>:
 8000fa4:	b538      	push	{r3, r4, r5, lr}
 8000fa6:	4d06      	ldr	r5, [pc, #24]	@ (8000fc0 <_close_r+0x1c>)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	4604      	mov	r4, r0
 8000fac:	4608      	mov	r0, r1
 8000fae:	602b      	str	r3, [r5, #0]
 8000fb0:	f7ff fc29 	bl	8000806 <_close>
 8000fb4:	1c43      	adds	r3, r0, #1
 8000fb6:	d102      	bne.n	8000fbe <_close_r+0x1a>
 8000fb8:	682b      	ldr	r3, [r5, #0]
 8000fba:	b103      	cbz	r3, 8000fbe <_close_r+0x1a>
 8000fbc:	6023      	str	r3, [r4, #0]
 8000fbe:	bd38      	pop	{r3, r4, r5, pc}
 8000fc0:	200001cc 	.word	0x200001cc

08000fc4 <_lseek_r>:
 8000fc4:	b538      	push	{r3, r4, r5, lr}
 8000fc6:	4d07      	ldr	r5, [pc, #28]	@ (8000fe4 <_lseek_r+0x20>)
 8000fc8:	4604      	mov	r4, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4611      	mov	r1, r2
 8000fce:	2200      	movs	r2, #0
 8000fd0:	602a      	str	r2, [r5, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	f7ff fc3e 	bl	8000854 <_lseek>
 8000fd8:	1c43      	adds	r3, r0, #1
 8000fda:	d102      	bne.n	8000fe2 <_lseek_r+0x1e>
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	b103      	cbz	r3, 8000fe2 <_lseek_r+0x1e>
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
 8000fe4:	200001cc 	.word	0x200001cc

08000fe8 <_read_r>:
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4d07      	ldr	r5, [pc, #28]	@ (8001008 <_read_r+0x20>)
 8000fec:	4604      	mov	r4, r0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	602a      	str	r2, [r5, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f7ff fbcc 	bl	8000794 <_read>
 8000ffc:	1c43      	adds	r3, r0, #1
 8000ffe:	d102      	bne.n	8001006 <_read_r+0x1e>
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	b103      	cbz	r3, 8001006 <_read_r+0x1e>
 8001004:	6023      	str	r3, [r4, #0]
 8001006:	bd38      	pop	{r3, r4, r5, pc}
 8001008:	200001cc 	.word	0x200001cc

0800100c <_write_r>:
 800100c:	b538      	push	{r3, r4, r5, lr}
 800100e:	4d07      	ldr	r5, [pc, #28]	@ (800102c <_write_r+0x20>)
 8001010:	4604      	mov	r4, r0
 8001012:	4608      	mov	r0, r1
 8001014:	4611      	mov	r1, r2
 8001016:	2200      	movs	r2, #0
 8001018:	602a      	str	r2, [r5, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	f7ff fbd7 	bl	80007ce <_write>
 8001020:	1c43      	adds	r3, r0, #1
 8001022:	d102      	bne.n	800102a <_write_r+0x1e>
 8001024:	682b      	ldr	r3, [r5, #0]
 8001026:	b103      	cbz	r3, 800102a <_write_r+0x1e>
 8001028:	6023      	str	r3, [r4, #0]
 800102a:	bd38      	pop	{r3, r4, r5, pc}
 800102c:	200001cc 	.word	0x200001cc

08001030 <__errno>:
 8001030:	4b01      	ldr	r3, [pc, #4]	@ (8001038 <__errno+0x8>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000000c 	.word	0x2000000c

0800103c <__libc_init_array>:
 800103c:	b570      	push	{r4, r5, r6, lr}
 800103e:	4d0d      	ldr	r5, [pc, #52]	@ (8001074 <__libc_init_array+0x38>)
 8001040:	4c0d      	ldr	r4, [pc, #52]	@ (8001078 <__libc_init_array+0x3c>)
 8001042:	1b64      	subs	r4, r4, r5
 8001044:	10a4      	asrs	r4, r4, #2
 8001046:	2600      	movs	r6, #0
 8001048:	42a6      	cmp	r6, r4
 800104a:	d109      	bne.n	8001060 <__libc_init_array+0x24>
 800104c:	4d0b      	ldr	r5, [pc, #44]	@ (800107c <__libc_init_array+0x40>)
 800104e:	4c0c      	ldr	r4, [pc, #48]	@ (8001080 <__libc_init_array+0x44>)
 8001050:	f000 fa54 	bl	80014fc <_init>
 8001054:	1b64      	subs	r4, r4, r5
 8001056:	10a4      	asrs	r4, r4, #2
 8001058:	2600      	movs	r6, #0
 800105a:	42a6      	cmp	r6, r4
 800105c:	d105      	bne.n	800106a <__libc_init_array+0x2e>
 800105e:	bd70      	pop	{r4, r5, r6, pc}
 8001060:	f855 3b04 	ldr.w	r3, [r5], #4
 8001064:	4798      	blx	r3
 8001066:	3601      	adds	r6, #1
 8001068:	e7ee      	b.n	8001048 <__libc_init_array+0xc>
 800106a:	f855 3b04 	ldr.w	r3, [r5], #4
 800106e:	4798      	blx	r3
 8001070:	3601      	adds	r6, #1
 8001072:	e7f2      	b.n	800105a <__libc_init_array+0x1e>
 8001074:	08001598 	.word	0x08001598
 8001078:	08001598 	.word	0x08001598
 800107c:	08001598 	.word	0x08001598
 8001080:	0800159c 	.word	0x0800159c

08001084 <__retarget_lock_init_recursive>:
 8001084:	4770      	bx	lr

08001086 <__retarget_lock_acquire_recursive>:
 8001086:	4770      	bx	lr

08001088 <__retarget_lock_release_recursive>:
 8001088:	4770      	bx	lr
	...

0800108c <_free_r>:
 800108c:	b538      	push	{r3, r4, r5, lr}
 800108e:	4605      	mov	r5, r0
 8001090:	2900      	cmp	r1, #0
 8001092:	d041      	beq.n	8001118 <_free_r+0x8c>
 8001094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001098:	1f0c      	subs	r4, r1, #4
 800109a:	2b00      	cmp	r3, #0
 800109c:	bfb8      	it	lt
 800109e:	18e4      	addlt	r4, r4, r3
 80010a0:	f000 f8e0 	bl	8001264 <__malloc_lock>
 80010a4:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <_free_r+0x90>)
 80010a6:	6813      	ldr	r3, [r2, #0]
 80010a8:	b933      	cbnz	r3, 80010b8 <_free_r+0x2c>
 80010aa:	6063      	str	r3, [r4, #4]
 80010ac:	6014      	str	r4, [r2, #0]
 80010ae:	4628      	mov	r0, r5
 80010b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010b4:	f000 b8dc 	b.w	8001270 <__malloc_unlock>
 80010b8:	42a3      	cmp	r3, r4
 80010ba:	d908      	bls.n	80010ce <_free_r+0x42>
 80010bc:	6820      	ldr	r0, [r4, #0]
 80010be:	1821      	adds	r1, r4, r0
 80010c0:	428b      	cmp	r3, r1
 80010c2:	bf01      	itttt	eq
 80010c4:	6819      	ldreq	r1, [r3, #0]
 80010c6:	685b      	ldreq	r3, [r3, #4]
 80010c8:	1809      	addeq	r1, r1, r0
 80010ca:	6021      	streq	r1, [r4, #0]
 80010cc:	e7ed      	b.n	80010aa <_free_r+0x1e>
 80010ce:	461a      	mov	r2, r3
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	b10b      	cbz	r3, 80010d8 <_free_r+0x4c>
 80010d4:	42a3      	cmp	r3, r4
 80010d6:	d9fa      	bls.n	80010ce <_free_r+0x42>
 80010d8:	6811      	ldr	r1, [r2, #0]
 80010da:	1850      	adds	r0, r2, r1
 80010dc:	42a0      	cmp	r0, r4
 80010de:	d10b      	bne.n	80010f8 <_free_r+0x6c>
 80010e0:	6820      	ldr	r0, [r4, #0]
 80010e2:	4401      	add	r1, r0
 80010e4:	1850      	adds	r0, r2, r1
 80010e6:	4283      	cmp	r3, r0
 80010e8:	6011      	str	r1, [r2, #0]
 80010ea:	d1e0      	bne.n	80010ae <_free_r+0x22>
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	6053      	str	r3, [r2, #4]
 80010f2:	4408      	add	r0, r1
 80010f4:	6010      	str	r0, [r2, #0]
 80010f6:	e7da      	b.n	80010ae <_free_r+0x22>
 80010f8:	d902      	bls.n	8001100 <_free_r+0x74>
 80010fa:	230c      	movs	r3, #12
 80010fc:	602b      	str	r3, [r5, #0]
 80010fe:	e7d6      	b.n	80010ae <_free_r+0x22>
 8001100:	6820      	ldr	r0, [r4, #0]
 8001102:	1821      	adds	r1, r4, r0
 8001104:	428b      	cmp	r3, r1
 8001106:	bf04      	itt	eq
 8001108:	6819      	ldreq	r1, [r3, #0]
 800110a:	685b      	ldreq	r3, [r3, #4]
 800110c:	6063      	str	r3, [r4, #4]
 800110e:	bf04      	itt	eq
 8001110:	1809      	addeq	r1, r1, r0
 8001112:	6021      	streq	r1, [r4, #0]
 8001114:	6054      	str	r4, [r2, #4]
 8001116:	e7ca      	b.n	80010ae <_free_r+0x22>
 8001118:	bd38      	pop	{r3, r4, r5, pc}
 800111a:	bf00      	nop
 800111c:	200001d8 	.word	0x200001d8

08001120 <sbrk_aligned>:
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	4e0f      	ldr	r6, [pc, #60]	@ (8001160 <sbrk_aligned+0x40>)
 8001124:	460c      	mov	r4, r1
 8001126:	6831      	ldr	r1, [r6, #0]
 8001128:	4605      	mov	r5, r0
 800112a:	b911      	cbnz	r1, 8001132 <sbrk_aligned+0x12>
 800112c:	f000 f9d6 	bl	80014dc <_sbrk_r>
 8001130:	6030      	str	r0, [r6, #0]
 8001132:	4621      	mov	r1, r4
 8001134:	4628      	mov	r0, r5
 8001136:	f000 f9d1 	bl	80014dc <_sbrk_r>
 800113a:	1c43      	adds	r3, r0, #1
 800113c:	d103      	bne.n	8001146 <sbrk_aligned+0x26>
 800113e:	f04f 34ff 	mov.w	r4, #4294967295
 8001142:	4620      	mov	r0, r4
 8001144:	bd70      	pop	{r4, r5, r6, pc}
 8001146:	1cc4      	adds	r4, r0, #3
 8001148:	f024 0403 	bic.w	r4, r4, #3
 800114c:	42a0      	cmp	r0, r4
 800114e:	d0f8      	beq.n	8001142 <sbrk_aligned+0x22>
 8001150:	1a21      	subs	r1, r4, r0
 8001152:	4628      	mov	r0, r5
 8001154:	f000 f9c2 	bl	80014dc <_sbrk_r>
 8001158:	3001      	adds	r0, #1
 800115a:	d1f2      	bne.n	8001142 <sbrk_aligned+0x22>
 800115c:	e7ef      	b.n	800113e <sbrk_aligned+0x1e>
 800115e:	bf00      	nop
 8001160:	200001d4 	.word	0x200001d4

08001164 <_malloc_r>:
 8001164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001168:	1ccd      	adds	r5, r1, #3
 800116a:	f025 0503 	bic.w	r5, r5, #3
 800116e:	3508      	adds	r5, #8
 8001170:	2d0c      	cmp	r5, #12
 8001172:	bf38      	it	cc
 8001174:	250c      	movcc	r5, #12
 8001176:	2d00      	cmp	r5, #0
 8001178:	4606      	mov	r6, r0
 800117a:	db01      	blt.n	8001180 <_malloc_r+0x1c>
 800117c:	42a9      	cmp	r1, r5
 800117e:	d904      	bls.n	800118a <_malloc_r+0x26>
 8001180:	230c      	movs	r3, #12
 8001182:	6033      	str	r3, [r6, #0]
 8001184:	2000      	movs	r0, #0
 8001186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800118a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001260 <_malloc_r+0xfc>
 800118e:	f000 f869 	bl	8001264 <__malloc_lock>
 8001192:	f8d8 3000 	ldr.w	r3, [r8]
 8001196:	461c      	mov	r4, r3
 8001198:	bb44      	cbnz	r4, 80011ec <_malloc_r+0x88>
 800119a:	4629      	mov	r1, r5
 800119c:	4630      	mov	r0, r6
 800119e:	f7ff ffbf 	bl	8001120 <sbrk_aligned>
 80011a2:	1c43      	adds	r3, r0, #1
 80011a4:	4604      	mov	r4, r0
 80011a6:	d158      	bne.n	800125a <_malloc_r+0xf6>
 80011a8:	f8d8 4000 	ldr.w	r4, [r8]
 80011ac:	4627      	mov	r7, r4
 80011ae:	2f00      	cmp	r7, #0
 80011b0:	d143      	bne.n	800123a <_malloc_r+0xd6>
 80011b2:	2c00      	cmp	r4, #0
 80011b4:	d04b      	beq.n	800124e <_malloc_r+0xea>
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	4639      	mov	r1, r7
 80011ba:	4630      	mov	r0, r6
 80011bc:	eb04 0903 	add.w	r9, r4, r3
 80011c0:	f000 f98c 	bl	80014dc <_sbrk_r>
 80011c4:	4581      	cmp	r9, r0
 80011c6:	d142      	bne.n	800124e <_malloc_r+0xea>
 80011c8:	6821      	ldr	r1, [r4, #0]
 80011ca:	1a6d      	subs	r5, r5, r1
 80011cc:	4629      	mov	r1, r5
 80011ce:	4630      	mov	r0, r6
 80011d0:	f7ff ffa6 	bl	8001120 <sbrk_aligned>
 80011d4:	3001      	adds	r0, #1
 80011d6:	d03a      	beq.n	800124e <_malloc_r+0xea>
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	442b      	add	r3, r5
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	f8d8 3000 	ldr.w	r3, [r8]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	bb62      	cbnz	r2, 8001240 <_malloc_r+0xdc>
 80011e6:	f8c8 7000 	str.w	r7, [r8]
 80011ea:	e00f      	b.n	800120c <_malloc_r+0xa8>
 80011ec:	6822      	ldr	r2, [r4, #0]
 80011ee:	1b52      	subs	r2, r2, r5
 80011f0:	d420      	bmi.n	8001234 <_malloc_r+0xd0>
 80011f2:	2a0b      	cmp	r2, #11
 80011f4:	d917      	bls.n	8001226 <_malloc_r+0xc2>
 80011f6:	1961      	adds	r1, r4, r5
 80011f8:	42a3      	cmp	r3, r4
 80011fa:	6025      	str	r5, [r4, #0]
 80011fc:	bf18      	it	ne
 80011fe:	6059      	strne	r1, [r3, #4]
 8001200:	6863      	ldr	r3, [r4, #4]
 8001202:	bf08      	it	eq
 8001204:	f8c8 1000 	streq.w	r1, [r8]
 8001208:	5162      	str	r2, [r4, r5]
 800120a:	604b      	str	r3, [r1, #4]
 800120c:	4630      	mov	r0, r6
 800120e:	f000 f82f 	bl	8001270 <__malloc_unlock>
 8001212:	f104 000b 	add.w	r0, r4, #11
 8001216:	1d23      	adds	r3, r4, #4
 8001218:	f020 0007 	bic.w	r0, r0, #7
 800121c:	1ac2      	subs	r2, r0, r3
 800121e:	bf1c      	itt	ne
 8001220:	1a1b      	subne	r3, r3, r0
 8001222:	50a3      	strne	r3, [r4, r2]
 8001224:	e7af      	b.n	8001186 <_malloc_r+0x22>
 8001226:	6862      	ldr	r2, [r4, #4]
 8001228:	42a3      	cmp	r3, r4
 800122a:	bf0c      	ite	eq
 800122c:	f8c8 2000 	streq.w	r2, [r8]
 8001230:	605a      	strne	r2, [r3, #4]
 8001232:	e7eb      	b.n	800120c <_malloc_r+0xa8>
 8001234:	4623      	mov	r3, r4
 8001236:	6864      	ldr	r4, [r4, #4]
 8001238:	e7ae      	b.n	8001198 <_malloc_r+0x34>
 800123a:	463c      	mov	r4, r7
 800123c:	687f      	ldr	r7, [r7, #4]
 800123e:	e7b6      	b.n	80011ae <_malloc_r+0x4a>
 8001240:	461a      	mov	r2, r3
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	42a3      	cmp	r3, r4
 8001246:	d1fb      	bne.n	8001240 <_malloc_r+0xdc>
 8001248:	2300      	movs	r3, #0
 800124a:	6053      	str	r3, [r2, #4]
 800124c:	e7de      	b.n	800120c <_malloc_r+0xa8>
 800124e:	230c      	movs	r3, #12
 8001250:	6033      	str	r3, [r6, #0]
 8001252:	4630      	mov	r0, r6
 8001254:	f000 f80c 	bl	8001270 <__malloc_unlock>
 8001258:	e794      	b.n	8001184 <_malloc_r+0x20>
 800125a:	6005      	str	r5, [r0, #0]
 800125c:	e7d6      	b.n	800120c <_malloc_r+0xa8>
 800125e:	bf00      	nop
 8001260:	200001d8 	.word	0x200001d8

08001264 <__malloc_lock>:
 8001264:	4801      	ldr	r0, [pc, #4]	@ (800126c <__malloc_lock+0x8>)
 8001266:	f7ff bf0e 	b.w	8001086 <__retarget_lock_acquire_recursive>
 800126a:	bf00      	nop
 800126c:	200001d0 	.word	0x200001d0

08001270 <__malloc_unlock>:
 8001270:	4801      	ldr	r0, [pc, #4]	@ (8001278 <__malloc_unlock+0x8>)
 8001272:	f7ff bf09 	b.w	8001088 <__retarget_lock_release_recursive>
 8001276:	bf00      	nop
 8001278:	200001d0 	.word	0x200001d0

0800127c <__sflush_r>:
 800127c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001284:	0716      	lsls	r6, r2, #28
 8001286:	4605      	mov	r5, r0
 8001288:	460c      	mov	r4, r1
 800128a:	d454      	bmi.n	8001336 <__sflush_r+0xba>
 800128c:	684b      	ldr	r3, [r1, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	dc02      	bgt.n	8001298 <__sflush_r+0x1c>
 8001292:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001294:	2b00      	cmp	r3, #0
 8001296:	dd48      	ble.n	800132a <__sflush_r+0xae>
 8001298:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800129a:	2e00      	cmp	r6, #0
 800129c:	d045      	beq.n	800132a <__sflush_r+0xae>
 800129e:	2300      	movs	r3, #0
 80012a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80012a4:	682f      	ldr	r7, [r5, #0]
 80012a6:	6a21      	ldr	r1, [r4, #32]
 80012a8:	602b      	str	r3, [r5, #0]
 80012aa:	d030      	beq.n	800130e <__sflush_r+0x92>
 80012ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012ae:	89a3      	ldrh	r3, [r4, #12]
 80012b0:	0759      	lsls	r1, r3, #29
 80012b2:	d505      	bpl.n	80012c0 <__sflush_r+0x44>
 80012b4:	6863      	ldr	r3, [r4, #4]
 80012b6:	1ad2      	subs	r2, r2, r3
 80012b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012ba:	b10b      	cbz	r3, 80012c0 <__sflush_r+0x44>
 80012bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012be:	1ad2      	subs	r2, r2, r3
 80012c0:	2300      	movs	r3, #0
 80012c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012c4:	6a21      	ldr	r1, [r4, #32]
 80012c6:	4628      	mov	r0, r5
 80012c8:	47b0      	blx	r6
 80012ca:	1c43      	adds	r3, r0, #1
 80012cc:	89a3      	ldrh	r3, [r4, #12]
 80012ce:	d106      	bne.n	80012de <__sflush_r+0x62>
 80012d0:	6829      	ldr	r1, [r5, #0]
 80012d2:	291d      	cmp	r1, #29
 80012d4:	d82b      	bhi.n	800132e <__sflush_r+0xb2>
 80012d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001380 <__sflush_r+0x104>)
 80012d8:	410a      	asrs	r2, r1
 80012da:	07d6      	lsls	r6, r2, #31
 80012dc:	d427      	bmi.n	800132e <__sflush_r+0xb2>
 80012de:	2200      	movs	r2, #0
 80012e0:	6062      	str	r2, [r4, #4]
 80012e2:	04d9      	lsls	r1, r3, #19
 80012e4:	6922      	ldr	r2, [r4, #16]
 80012e6:	6022      	str	r2, [r4, #0]
 80012e8:	d504      	bpl.n	80012f4 <__sflush_r+0x78>
 80012ea:	1c42      	adds	r2, r0, #1
 80012ec:	d101      	bne.n	80012f2 <__sflush_r+0x76>
 80012ee:	682b      	ldr	r3, [r5, #0]
 80012f0:	b903      	cbnz	r3, 80012f4 <__sflush_r+0x78>
 80012f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80012f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012f6:	602f      	str	r7, [r5, #0]
 80012f8:	b1b9      	cbz	r1, 800132a <__sflush_r+0xae>
 80012fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012fe:	4299      	cmp	r1, r3
 8001300:	d002      	beq.n	8001308 <__sflush_r+0x8c>
 8001302:	4628      	mov	r0, r5
 8001304:	f7ff fec2 	bl	800108c <_free_r>
 8001308:	2300      	movs	r3, #0
 800130a:	6363      	str	r3, [r4, #52]	@ 0x34
 800130c:	e00d      	b.n	800132a <__sflush_r+0xae>
 800130e:	2301      	movs	r3, #1
 8001310:	4628      	mov	r0, r5
 8001312:	47b0      	blx	r6
 8001314:	4602      	mov	r2, r0
 8001316:	1c50      	adds	r0, r2, #1
 8001318:	d1c9      	bne.n	80012ae <__sflush_r+0x32>
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0c6      	beq.n	80012ae <__sflush_r+0x32>
 8001320:	2b1d      	cmp	r3, #29
 8001322:	d001      	beq.n	8001328 <__sflush_r+0xac>
 8001324:	2b16      	cmp	r3, #22
 8001326:	d11e      	bne.n	8001366 <__sflush_r+0xea>
 8001328:	602f      	str	r7, [r5, #0]
 800132a:	2000      	movs	r0, #0
 800132c:	e022      	b.n	8001374 <__sflush_r+0xf8>
 800132e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001332:	b21b      	sxth	r3, r3
 8001334:	e01b      	b.n	800136e <__sflush_r+0xf2>
 8001336:	690f      	ldr	r7, [r1, #16]
 8001338:	2f00      	cmp	r7, #0
 800133a:	d0f6      	beq.n	800132a <__sflush_r+0xae>
 800133c:	0793      	lsls	r3, r2, #30
 800133e:	680e      	ldr	r6, [r1, #0]
 8001340:	bf08      	it	eq
 8001342:	694b      	ldreq	r3, [r1, #20]
 8001344:	600f      	str	r7, [r1, #0]
 8001346:	bf18      	it	ne
 8001348:	2300      	movne	r3, #0
 800134a:	eba6 0807 	sub.w	r8, r6, r7
 800134e:	608b      	str	r3, [r1, #8]
 8001350:	f1b8 0f00 	cmp.w	r8, #0
 8001354:	dde9      	ble.n	800132a <__sflush_r+0xae>
 8001356:	6a21      	ldr	r1, [r4, #32]
 8001358:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800135a:	4643      	mov	r3, r8
 800135c:	463a      	mov	r2, r7
 800135e:	4628      	mov	r0, r5
 8001360:	47b0      	blx	r6
 8001362:	2800      	cmp	r0, #0
 8001364:	dc08      	bgt.n	8001378 <__sflush_r+0xfc>
 8001366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800136a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800136e:	81a3      	strh	r3, [r4, #12]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001378:	4407      	add	r7, r0
 800137a:	eba8 0800 	sub.w	r8, r8, r0
 800137e:	e7e7      	b.n	8001350 <__sflush_r+0xd4>
 8001380:	dfbffffe 	.word	0xdfbffffe

08001384 <_fflush_r>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	690b      	ldr	r3, [r1, #16]
 8001388:	4605      	mov	r5, r0
 800138a:	460c      	mov	r4, r1
 800138c:	b913      	cbnz	r3, 8001394 <_fflush_r+0x10>
 800138e:	2500      	movs	r5, #0
 8001390:	4628      	mov	r0, r5
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	b118      	cbz	r0, 800139e <_fflush_r+0x1a>
 8001396:	6a03      	ldr	r3, [r0, #32]
 8001398:	b90b      	cbnz	r3, 800139e <_fflush_r+0x1a>
 800139a:	f7ff fc8f 	bl	8000cbc <__sinit>
 800139e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f3      	beq.n	800138e <_fflush_r+0xa>
 80013a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80013a8:	07d0      	lsls	r0, r2, #31
 80013aa:	d404      	bmi.n	80013b6 <_fflush_r+0x32>
 80013ac:	0599      	lsls	r1, r3, #22
 80013ae:	d402      	bmi.n	80013b6 <_fflush_r+0x32>
 80013b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013b2:	f7ff fe68 	bl	8001086 <__retarget_lock_acquire_recursive>
 80013b6:	4628      	mov	r0, r5
 80013b8:	4621      	mov	r1, r4
 80013ba:	f7ff ff5f 	bl	800127c <__sflush_r>
 80013be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013c0:	07da      	lsls	r2, r3, #31
 80013c2:	4605      	mov	r5, r0
 80013c4:	d4e4      	bmi.n	8001390 <_fflush_r+0xc>
 80013c6:	89a3      	ldrh	r3, [r4, #12]
 80013c8:	059b      	lsls	r3, r3, #22
 80013ca:	d4e1      	bmi.n	8001390 <_fflush_r+0xc>
 80013cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013ce:	f7ff fe5b 	bl	8001088 <__retarget_lock_release_recursive>
 80013d2:	e7dd      	b.n	8001390 <_fflush_r+0xc>

080013d4 <__swhatbuf_r>:
 80013d4:	b570      	push	{r4, r5, r6, lr}
 80013d6:	460c      	mov	r4, r1
 80013d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013dc:	2900      	cmp	r1, #0
 80013de:	b096      	sub	sp, #88	@ 0x58
 80013e0:	4615      	mov	r5, r2
 80013e2:	461e      	mov	r6, r3
 80013e4:	da0d      	bge.n	8001402 <__swhatbuf_r+0x2e>
 80013e6:	89a3      	ldrh	r3, [r4, #12]
 80013e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013ec:	f04f 0100 	mov.w	r1, #0
 80013f0:	bf14      	ite	ne
 80013f2:	2340      	movne	r3, #64	@ 0x40
 80013f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013f8:	2000      	movs	r0, #0
 80013fa:	6031      	str	r1, [r6, #0]
 80013fc:	602b      	str	r3, [r5, #0]
 80013fe:	b016      	add	sp, #88	@ 0x58
 8001400:	bd70      	pop	{r4, r5, r6, pc}
 8001402:	466a      	mov	r2, sp
 8001404:	f000 f848 	bl	8001498 <_fstat_r>
 8001408:	2800      	cmp	r0, #0
 800140a:	dbec      	blt.n	80013e6 <__swhatbuf_r+0x12>
 800140c:	9901      	ldr	r1, [sp, #4]
 800140e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001412:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001416:	4259      	negs	r1, r3
 8001418:	4159      	adcs	r1, r3
 800141a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800141e:	e7eb      	b.n	80013f8 <__swhatbuf_r+0x24>

08001420 <__smakebuf_r>:
 8001420:	898b      	ldrh	r3, [r1, #12]
 8001422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001424:	079d      	lsls	r5, r3, #30
 8001426:	4606      	mov	r6, r0
 8001428:	460c      	mov	r4, r1
 800142a:	d507      	bpl.n	800143c <__smakebuf_r+0x1c>
 800142c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001430:	6023      	str	r3, [r4, #0]
 8001432:	6123      	str	r3, [r4, #16]
 8001434:	2301      	movs	r3, #1
 8001436:	6163      	str	r3, [r4, #20]
 8001438:	b003      	add	sp, #12
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143c:	ab01      	add	r3, sp, #4
 800143e:	466a      	mov	r2, sp
 8001440:	f7ff ffc8 	bl	80013d4 <__swhatbuf_r>
 8001444:	9f00      	ldr	r7, [sp, #0]
 8001446:	4605      	mov	r5, r0
 8001448:	4639      	mov	r1, r7
 800144a:	4630      	mov	r0, r6
 800144c:	f7ff fe8a 	bl	8001164 <_malloc_r>
 8001450:	b948      	cbnz	r0, 8001466 <__smakebuf_r+0x46>
 8001452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001456:	059a      	lsls	r2, r3, #22
 8001458:	d4ee      	bmi.n	8001438 <__smakebuf_r+0x18>
 800145a:	f023 0303 	bic.w	r3, r3, #3
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	81a3      	strh	r3, [r4, #12]
 8001464:	e7e2      	b.n	800142c <__smakebuf_r+0xc>
 8001466:	89a3      	ldrh	r3, [r4, #12]
 8001468:	6020      	str	r0, [r4, #0]
 800146a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800146e:	81a3      	strh	r3, [r4, #12]
 8001470:	9b01      	ldr	r3, [sp, #4]
 8001472:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001476:	b15b      	cbz	r3, 8001490 <__smakebuf_r+0x70>
 8001478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800147c:	4630      	mov	r0, r6
 800147e:	f000 f81d 	bl	80014bc <_isatty_r>
 8001482:	b128      	cbz	r0, 8001490 <__smakebuf_r+0x70>
 8001484:	89a3      	ldrh	r3, [r4, #12]
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	81a3      	strh	r3, [r4, #12]
 8001490:	89a3      	ldrh	r3, [r4, #12]
 8001492:	431d      	orrs	r5, r3
 8001494:	81a5      	strh	r5, [r4, #12]
 8001496:	e7cf      	b.n	8001438 <__smakebuf_r+0x18>

08001498 <_fstat_r>:
 8001498:	b538      	push	{r3, r4, r5, lr}
 800149a:	4d07      	ldr	r5, [pc, #28]	@ (80014b8 <_fstat_r+0x20>)
 800149c:	2300      	movs	r3, #0
 800149e:	4604      	mov	r4, r0
 80014a0:	4608      	mov	r0, r1
 80014a2:	4611      	mov	r1, r2
 80014a4:	602b      	str	r3, [r5, #0]
 80014a6:	f7ff f9ba 	bl	800081e <_fstat>
 80014aa:	1c43      	adds	r3, r0, #1
 80014ac:	d102      	bne.n	80014b4 <_fstat_r+0x1c>
 80014ae:	682b      	ldr	r3, [r5, #0]
 80014b0:	b103      	cbz	r3, 80014b4 <_fstat_r+0x1c>
 80014b2:	6023      	str	r3, [r4, #0]
 80014b4:	bd38      	pop	{r3, r4, r5, pc}
 80014b6:	bf00      	nop
 80014b8:	200001cc 	.word	0x200001cc

080014bc <_isatty_r>:
 80014bc:	b538      	push	{r3, r4, r5, lr}
 80014be:	4d06      	ldr	r5, [pc, #24]	@ (80014d8 <_isatty_r+0x1c>)
 80014c0:	2300      	movs	r3, #0
 80014c2:	4604      	mov	r4, r0
 80014c4:	4608      	mov	r0, r1
 80014c6:	602b      	str	r3, [r5, #0]
 80014c8:	f7ff f9b9 	bl	800083e <_isatty>
 80014cc:	1c43      	adds	r3, r0, #1
 80014ce:	d102      	bne.n	80014d6 <_isatty_r+0x1a>
 80014d0:	682b      	ldr	r3, [r5, #0]
 80014d2:	b103      	cbz	r3, 80014d6 <_isatty_r+0x1a>
 80014d4:	6023      	str	r3, [r4, #0]
 80014d6:	bd38      	pop	{r3, r4, r5, pc}
 80014d8:	200001cc 	.word	0x200001cc

080014dc <_sbrk_r>:
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4d06      	ldr	r5, [pc, #24]	@ (80014f8 <_sbrk_r+0x1c>)
 80014e0:	2300      	movs	r3, #0
 80014e2:	4604      	mov	r4, r0
 80014e4:	4608      	mov	r0, r1
 80014e6:	602b      	str	r3, [r5, #0]
 80014e8:	f7ff f9c2 	bl	8000870 <_sbrk>
 80014ec:	1c43      	adds	r3, r0, #1
 80014ee:	d102      	bne.n	80014f6 <_sbrk_r+0x1a>
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	b103      	cbz	r3, 80014f6 <_sbrk_r+0x1a>
 80014f4:	6023      	str	r3, [r4, #0]
 80014f6:	bd38      	pop	{r3, r4, r5, pc}
 80014f8:	200001cc 	.word	0x200001cc

080014fc <_init>:
 80014fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fe:	bf00      	nop
 8001500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001502:	bc08      	pop	{r3}
 8001504:	469e      	mov	lr, r3
 8001506:	4770      	bx	lr

08001508 <_fini>:
 8001508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150a:	bf00      	nop
 800150c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800150e:	bc08      	pop	{r3}
 8001510:	469e      	mov	lr, r3
 8001512:	4770      	bx	lr
