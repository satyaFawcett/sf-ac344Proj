
sf-acProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013bc  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001540  08001540  00002540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015c4  080015c4  00003060  2**0
                  CONTENTS
  4 .ARM          00000000  080015c4  080015c4  00003060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015c4  080015c4  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015c4  080015c4  000025c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015c8  080015c8  000025c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080015cc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          00000178  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00003060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003214  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c4b  00000000  00000000  000062a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  00006ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001aa  00000000  00000000  00007168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed11  00000000  00000000  00007312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000449e  00000000  00000000  00026023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a45cb  00000000  00000000  0002a4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cea8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d54  00000000  00000000  000cead0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  000cf824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000060 	.word	0x20000060
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08001528 	.word	0x08001528

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000064 	.word	0x20000064
 80001c0:	08001528 	.word	0x08001528

080001c4 <LED_init>:
#include "stm32l476xx.h"
#include<stdio.h>
#include<stdint.h>
#include "sf344fun.h"

void LED_init(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	/*Description:
	 *
	 */
	enable_GPIO_clock(0); //enable GPIOA clock
 80001c8:	2000      	movs	r0, #0
 80001ca:	f000 f9e3 	bl	8000594 <enable_GPIO_clock>
	GPIOA->MODER &= ~GPIO_MODER_MODE5;
 80001ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001dc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0; // set PA5 to output
 80001de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}

080001f2 <toggle_LED>:
void toggle_LED(){
 80001f2:	b480      	push	{r7}
 80001f4:	af00      	add	r7, sp, #0
	/*Description:
	 *
	 */
	GPIOA->ODR ^= GPIO_ODR_OD5;
 80001f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001fa:	695b      	ldr	r3, [r3, #20]
 80001fc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000200:	f083 0320 	eor.w	r3, r3, #32
 8000204:	6153      	str	r3, [r2, #20]
}
 8000206:	bf00      	nop
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	db0b      	blt.n	800023a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	4907      	ldr	r1, [pc, #28]	@ (8000248 <__NVIC_EnableIRQ+0x38>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e100 	.word	0xe000e100

0800024c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025c:	2b00      	cmp	r3, #0
 800025e:	db0a      	blt.n	8000276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	b2da      	uxtb	r2, r3
 8000264:	490c      	ldr	r1, [pc, #48]	@ (8000298 <__NVIC_SetPriority+0x4c>)
 8000266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026a:	0112      	lsls	r2, r2, #4
 800026c:	b2d2      	uxtb	r2, r2
 800026e:	440b      	add	r3, r1
 8000270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000274:	e00a      	b.n	800028c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4908      	ldr	r1, [pc, #32]	@ (800029c <__NVIC_SetPriority+0x50>)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	f003 030f 	and.w	r3, r3, #15
 8000282:	3b04      	subs	r3, #4
 8000284:	0112      	lsls	r2, r2, #4
 8000286:	b2d2      	uxtb	r2, r2
 8000288:	440b      	add	r3, r1
 800028a:	761a      	strb	r2, [r3, #24]
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	e000e100 	.word	0xe000e100
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <button_init>:
#include "sf344fun.h"
#include "delay.h"

extern volatile int button_pressed;

void button_init(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	/*Description:
	 *
	 */

	//board button init
	enable_GPIO_clock(2); //GPIOC clock on
 80002a4:	2002      	movs	r0, #2
 80002a6:	f000 f975 	bl	8000594 <enable_GPIO_clock>
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; //SYSCFG clock on
 80002aa:	4b33      	ldr	r3, [pc, #204]	@ (8000378 <button_init+0xd8>)
 80002ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002ae:	4a32      	ldr	r2, [pc, #200]	@ (8000378 <button_init+0xd8>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6613      	str	r3, [r2, #96]	@ 0x60
	GPIOC->MODER &= ~GPIO_MODER_MODE13; // PC13 to input
 80002b6:	4b31      	ldr	r3, [pc, #196]	@ (800037c <button_init+0xdc>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a30      	ldr	r2, [pc, #192]	@ (800037c <button_init+0xdc>)
 80002bc:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002c0:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD13;
 80002c2:	4b2e      	ldr	r3, [pc, #184]	@ (800037c <button_init+0xdc>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	4a2d      	ldr	r2, [pc, #180]	@ (800037c <button_init+0xdc>)
 80002c8:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002cc:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPD13_1; // PC13 to pull down
 80002ce:	4b2b      	ldr	r3, [pc, #172]	@ (800037c <button_init+0xdc>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	4a2a      	ldr	r2, [pc, #168]	@ (800037c <button_init+0xdc>)
 80002d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80002d8:	60d3      	str	r3, [r2, #12]

	SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR4_EXTI13; //Map EXTI line 13 to PC
 80002da:	4b29      	ldr	r3, [pc, #164]	@ (8000380 <button_init+0xe0>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a28      	ldr	r2, [pc, #160]	@ (8000380 <button_init+0xe0>)
 80002e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80002e4:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
 80002e6:	4b26      	ldr	r3, [pc, #152]	@ (8000380 <button_init+0xe0>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a25      	ldr	r2, [pc, #148]	@ (8000380 <button_init+0xe0>)
 80002ec:	f043 0320 	orr.w	r3, r3, #32
 80002f0:	6153      	str	r3, [r2, #20]
	EXTI->FTSR1 |= EXTI_FTSR1_FT13; //Set line 13 to falling edge trigger
 80002f2:	4b24      	ldr	r3, [pc, #144]	@ (8000384 <button_init+0xe4>)
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	4a23      	ldr	r2, [pc, #140]	@ (8000384 <button_init+0xe4>)
 80002f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002fc:	60d3      	str	r3, [r2, #12]
	EXTI->IMR1 |= EXTI_IMR1_IM13; //Unmask interrupt event for line 13
 80002fe:	4b21      	ldr	r3, [pc, #132]	@ (8000384 <button_init+0xe4>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a20      	ldr	r2, [pc, #128]	@ (8000384 <button_init+0xe4>)
 8000304:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000308:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(TIM4_IRQn, 1);			// Set interrupt priority
 800030a:	2101      	movs	r1, #1
 800030c:	201e      	movs	r0, #30
 800030e:	f7ff ff9d 	bl	800024c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI15_10_IRQn); // enable interrupt handler for 15
 8000312:	2028      	movs	r0, #40	@ 0x28
 8000314:	f7ff ff7c 	bl	8000210 <__NVIC_EnableIRQ>

	//external button init
	GPIOC->MODER &= ~GPIO_MODER_MODE10; // PC10 to input
 8000318:	4b18      	ldr	r3, [pc, #96]	@ (800037c <button_init+0xdc>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a17      	ldr	r2, [pc, #92]	@ (800037c <button_init+0xdc>)
 800031e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000322:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD10;
 8000324:	4b15      	ldr	r3, [pc, #84]	@ (800037c <button_init+0xdc>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	4a14      	ldr	r2, [pc, #80]	@ (800037c <button_init+0xdc>)
 800032a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800032e:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPD10_1; // PC10 to pull down
 8000330:	4b12      	ldr	r3, [pc, #72]	@ (800037c <button_init+0xdc>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	4a11      	ldr	r2, [pc, #68]	@ (800037c <button_init+0xdc>)
 8000336:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800033a:	60d3      	str	r3, [r2, #12]

	SYSCFG->EXTICR[2] &= ~SYSCFG_EXTICR3_EXTI10; //Map EXTI line 10 to PC
 800033c:	4b10      	ldr	r3, [pc, #64]	@ (8000380 <button_init+0xe0>)
 800033e:	691b      	ldr	r3, [r3, #16]
 8000340:	4a0f      	ldr	r2, [pc, #60]	@ (8000380 <button_init+0xe0>)
 8000342:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000346:	6113      	str	r3, [r2, #16]
	SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI10_PC;
 8000348:	4b0d      	ldr	r3, [pc, #52]	@ (8000380 <button_init+0xe0>)
 800034a:	691b      	ldr	r3, [r3, #16]
 800034c:	4a0c      	ldr	r2, [pc, #48]	@ (8000380 <button_init+0xe0>)
 800034e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000352:	6113      	str	r3, [r2, #16]
	EXTI->FTSR1 |= EXTI_FTSR1_FT10; //Set line 10 to falling edge trigger
 8000354:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <button_init+0xe4>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	4a0a      	ldr	r2, [pc, #40]	@ (8000384 <button_init+0xe4>)
 800035a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800035e:	60d3      	str	r3, [r2, #12]
	EXTI->IMR1 |= EXTI_IMR1_IM10; //Unmask interrupt event for line 10
 8000360:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <button_init+0xe4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a07      	ldr	r2, [pc, #28]	@ (8000384 <button_init+0xe4>)
 8000366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800036a:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(EXTI15_10_IRQn); // enable interrupt handler for 10 to 15
 800036c:	2028      	movs	r0, #40	@ 0x28
 800036e:	f7ff ff4f 	bl	8000210 <__NVIC_EnableIRQ>
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	48000800 	.word	0x48000800
 8000380:	40010000 	.word	0x40010000
 8000384:	40010400 	.word	0x40010400

08000388 <EXTI15_10_IRQHandler>:

// Interrupt handler for EXTI lines 10 to 15
void EXTI15_10_IRQHandler(void) {
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	//blue button pressed
	if((EXTI->PR1 & EXTI_PR1_PIF13) != 0){
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <EXTI15_10_IRQHandler+0x44>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000394:	2b00      	cmp	r3, #0
 8000396:	d006      	beq.n	80003a6 <EXTI15_10_IRQHandler+0x1e>
//		for(int i = 0; i < 5000; i++);
		button_pressed = 1;
 8000398:	4b0d      	ldr	r3, [pc, #52]	@ (80003d0 <EXTI15_10_IRQHandler+0x48>)
 800039a:	2201      	movs	r2, #1
 800039c:	601a      	str	r2, [r3, #0]
		EXTI->PR1 = EXTI_PR1_PIF13; //clear pending flag
 800039e:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <EXTI15_10_IRQHandler+0x44>)
 80003a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003a4:	615a      	str	r2, [r3, #20]
	}
	//button connected to PC10 pressed
	if((EXTI->PR1 & EXTI_PR1_PIF10) != 0){
 80003a6:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <EXTI15_10_IRQHandler+0x44>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d006      	beq.n	80003c0 <EXTI15_10_IRQHandler+0x38>
//		delay(10000); //debounce
		button_pressed = 1;
 80003b2:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <EXTI15_10_IRQHandler+0x48>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
		EXTI->PR1 = EXTI_PR1_PIF10; //clear pending flag
 80003b8:	4b04      	ldr	r3, [pc, #16]	@ (80003cc <EXTI15_10_IRQHandler+0x44>)
 80003ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80003be:	615a      	str	r2, [r3, #20]
	}

}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40010400 	.word	0x40010400
 80003d0:	20000080 	.word	0x20000080

080003d4 <buzzer_init>:

//constants
const unsigned int freq[] = {100, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 494, 523, 554, 587};
#define BUZZER_PIN 10;

void buzzer_init(){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	/*Description:
	 *
	 */
	enable_GPIO_clock(0); //enable GPIOA clock
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f8db 	bl	8000594 <enable_GPIO_clock>
	GPIOA->MODER &= ~GPIO_MODER_MODE10;
 80003de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003e8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80003ec:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE10_0; // set PA10 to output
 80003ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003fc:	6013      	str	r3, [r2, #0]
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <playnote>:

void playnote(struct note n) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	80b8      	strh	r0, [r7, #4]
	for (int i = 0; i < (n.duration * freq[n.notenum]) / 8; i++) {
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	e028      	b.n	8000464 <playnote+0x60>
		GPIOA->ODR ^= 1 << BUZZER_PIN; // Toggle buzzer
 8000412:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800041c:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 8000420:	6153      	str	r3, [r2, #20]
		delay(500000 / freq[n.notenum]); // Half period
 8000422:	793b      	ldrb	r3, [r7, #4]
 8000424:	461a      	mov	r2, r3
 8000426:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <playnote+0x84>)
 8000428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800042c:	4a17      	ldr	r2, [pc, #92]	@ (800048c <playnote+0x88>)
 800042e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f83e 	bl	80004b4 <delay>
		GPIOA->ODR ^= 1 << BUZZER_PIN; // Toggle buzzer
 8000438:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000442:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 8000446:	6153      	str	r3, [r2, #20]
		delay(500000 / freq[n.notenum]);
 8000448:	793b      	ldrb	r3, [r7, #4]
 800044a:	461a      	mov	r2, r3
 800044c:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <playnote+0x84>)
 800044e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000452:	4a0e      	ldr	r2, [pc, #56]	@ (800048c <playnote+0x88>)
 8000454:	fbb2 f3f3 	udiv	r3, r2, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f82b 	bl	80004b4 <delay>
	for (int i = 0; i < (n.duration * freq[n.notenum]) / 8; i++) {
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3301      	adds	r3, #1
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	797b      	ldrb	r3, [r7, #5]
 8000466:	461a      	mov	r2, r3
 8000468:	793b      	ldrb	r3, [r7, #4]
 800046a:	4619      	mov	r1, r3
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <playnote+0x84>)
 800046e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000472:	fb02 f303 	mul.w	r3, r2, r3
 8000476:	08da      	lsrs	r2, r3, #3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	429a      	cmp	r2, r3
 800047c:	d8c9      	bhi.n	8000412 <playnote+0xe>
	}
//	delay(0.5 * 125000); // Short delay between notes
}
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	3710      	adds	r7, #16
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	08001584 	.word	0x08001584
 800048c:	0007a120 	.word	0x0007a120

08000490 <SysTick_Handler>:
#include<stdio.h>
#include<stdint.h>

volatile int time_delay = 0;

void SysTick_Handler(){
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	/*Description:
	 *
	 */
	if(time_delay > 0){
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <SysTick_Handler+0x20>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	dd04      	ble.n	80004a6 <SysTick_Handler+0x16>
		time_delay--; //decrement time delay
 800049c:	4b04      	ldr	r3, [pc, #16]	@ (80004b0 <SysTick_Handler+0x20>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a03      	ldr	r2, [pc, #12]	@ (80004b0 <SysTick_Handler+0x20>)
 80004a4:	6013      	str	r3, [r2, #0]
	}
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	2000007c 	.word	0x2000007c

080004b4 <delay>:

void delay(uint32_t nTime){
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	/*Description:
	 *
	 */
	time_delay = nTime;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a07      	ldr	r2, [pc, #28]	@ (80004dc <delay+0x28>)
 80004c0:	6013      	str	r3, [r2, #0]
	while(time_delay > 0);
 80004c2:	bf00      	nop
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <delay+0x28>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	dcfb      	bgt.n	80004c4 <delay+0x10>
}
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	2000007c 	.word	0x2000007c

080004e0 <main>:
volatile int timeout = 1;
volatile int beat = 0;
int last_count = 0;

int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	System_Clock_Init();
 80004e4:	f000 f8de 	bl	80006a4 <System_Clock_Init>
	SysTick_Init(80);
 80004e8:	2050      	movs	r0, #80	@ 0x50
 80004ea:	f000 f96f 	bl	80007cc <SysTick_Init>
	LED_init();
 80004ee:	f7ff fe69 	bl	80001c4 <LED_init>
	button_init();
 80004f2:	f7ff fed5 	bl	80002a0 <button_init>
	buzzer_init();
 80004f6:	f7ff ff6d 	bl	80003d4 <buzzer_init>
	TIM4_Init();
 80004fa:	f000 fa81 	bl	8000a00 <TIM4_Init>
	TIM3_Init();
 80004fe:	f000 fae1 	bl	8000ac4 <TIM3_Init>


  /* Infinite loop */
  while (1){
	  //execute if button pressed
	  if(button_pressed){
 8000502:	4b1e      	ldr	r3, [pc, #120]	@ (800057c <main+0x9c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d028      	beq.n	800055c <main+0x7c>
		  //execute if timeout triggered
		  if(timeout){
 800050a:	4b1d      	ldr	r3, [pc, #116]	@ (8000580 <main+0xa0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00c      	beq.n	800052c <main+0x4c>
			  TIM4->CR1 |= TIM_CR1_CEN;	//Enable the timer
 8000512:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <main+0xa4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a1b      	ldr	r2, [pc, #108]	@ (8000584 <main+0xa4>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6013      	str	r3, [r2, #0]
			  TIM4->CNT = 0;
 800051e:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <main+0xa4>)
 8000520:	2200      	movs	r2, #0
 8000522:	625a      	str	r2, [r3, #36]	@ 0x24
			  timeout = 0;
 8000524:	4b16      	ldr	r3, [pc, #88]	@ (8000580 <main+0xa0>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e011      	b.n	8000550 <main+0x70>
		  }
		  else{
			  TIM3->CR1 &= ~TIM_CR1_CEN;
 800052c:	4b16      	ldr	r3, [pc, #88]	@ (8000588 <main+0xa8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a15      	ldr	r2, [pc, #84]	@ (8000588 <main+0xa8>)
 8000532:	f023 0301 	bic.w	r3, r3, #1
 8000536:	6013      	str	r3, [r2, #0]
			  TIM3->ARR = TIM4->CNT - offset;
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <main+0xa4>)
 800053a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800053c:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <main+0xa8>)
 800053e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000542:	62d3      	str	r3, [r2, #44]	@ 0x2c
			  TIM3->CR1 |= TIM_CR1_CEN;
 8000544:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <main+0xa8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0f      	ldr	r2, [pc, #60]	@ (8000588 <main+0xa8>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	6013      	str	r3, [r2, #0]
			  //play note and flash led
//	  		  toggle_LED();
//	  		  playnote(bass);
//	  		  toggle_LED();
		  }
		  TIM3->CNT = 0;
 8000550:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <main+0xa8>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	@ 0x24
		  button_pressed = 0;
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <main+0x9c>)
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
	  }

	  //execute if TIM3 overflows
	  if(beat){
 800055c:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <main+0xac>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0ce      	beq.n	8000502 <main+0x22>
		  //play note and flash led
		  toggle_LED();
 8000564:	f7ff fe45 	bl	80001f2 <toggle_LED>
		  playnote(bass);
 8000568:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <main+0xb0>)
 800056a:	6818      	ldr	r0, [r3, #0]
 800056c:	f7ff ff4a 	bl	8000404 <playnote>
		  toggle_LED();
 8000570:	f7ff fe3f 	bl	80001f2 <toggle_LED>
		  beat = 0;
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <main+0xac>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
	  if(button_pressed){
 800057a:	e7c2      	b.n	8000502 <main+0x22>
 800057c:	20000080 	.word	0x20000080
 8000580:	20000000 	.word	0x20000000
 8000584:	40000800 	.word	0x40000800
 8000588:	40000400 	.word	0x40000400
 800058c:	20000084 	.word	0x20000084
 8000590:	080015c0 	.word	0x080015c0

08000594 <enable_GPIO_clock>:

#include "stm32l476xx.h"
#include<stdio.h>
#include<stdint.h>

void enable_GPIO_clock(int port){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
//takes integer between 0 and 7 and enables the corresponding GPIO port clock
//with A = 0, H = 7
	switch (port) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b07      	cmp	r3, #7
 80005a0:	d84a      	bhi.n	8000638 <enable_GPIO_clock+0xa4>
 80005a2:	a201      	add	r2, pc, #4	@ (adr r2, 80005a8 <enable_GPIO_clock+0x14>)
 80005a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a8:	080005c9 	.word	0x080005c9
 80005ac:	080005d7 	.word	0x080005d7
 80005b0:	080005e5 	.word	0x080005e5
 80005b4:	080005f3 	.word	0x080005f3
 80005b8:	08000601 	.word	0x08000601
 80005bc:	0800060f 	.word	0x0800060f
 80005c0:	0800061d 	.word	0x0800061d
 80005c4:	0800062b 	.word	0x0800062b
		case 0:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <enable_GPIO_clock+0xb4>)
 80005ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005cc:	4a1e      	ldr	r2, [pc, #120]	@ (8000648 <enable_GPIO_clock+0xb4>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 80005d4:	e034      	b.n	8000640 <enable_GPIO_clock+0xac>
		case 1:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <enable_GPIO_clock+0xb4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	4a1b      	ldr	r2, [pc, #108]	@ (8000648 <enable_GPIO_clock+0xb4>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 80005e2:	e02d      	b.n	8000640 <enable_GPIO_clock+0xac>
		case 2:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <enable_GPIO_clock+0xb4>)
 80005e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <enable_GPIO_clock+0xb4>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 80005f0:	e026      	b.n	8000640 <enable_GPIO_clock+0xac>
		case 3:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <enable_GPIO_clock+0xb4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <enable_GPIO_clock+0xb4>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 80005fe:	e01f      	b.n	8000640 <enable_GPIO_clock+0xac>
		case 4:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOEEN;
 8000600:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <enable_GPIO_clock+0xb4>)
 8000602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000604:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <enable_GPIO_clock+0xb4>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 800060c:	e018      	b.n	8000640 <enable_GPIO_clock+0xac>
		case 5:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOFEN;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <enable_GPIO_clock+0xb4>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	4a0d      	ldr	r2, [pc, #52]	@ (8000648 <enable_GPIO_clock+0xb4>)
 8000614:	f043 0320 	orr.w	r3, r3, #32
 8000618:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 800061a:	e011      	b.n	8000640 <enable_GPIO_clock+0xac>
		case 6:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <enable_GPIO_clock+0xb4>)
 800061e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000620:	4a09      	ldr	r2, [pc, #36]	@ (8000648 <enable_GPIO_clock+0xb4>)
 8000622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000626:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 8000628:	e00a      	b.n	8000640 <enable_GPIO_clock+0xac>
		case 7:
			RCC -> AHB2ENR |= RCC_AHB2ENR_GPIOHEN;
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <enable_GPIO_clock+0xb4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	4a06      	ldr	r2, [pc, #24]	@ (8000648 <enable_GPIO_clock+0xb4>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000634:	64d3      	str	r3, [r2, #76]	@ 0x4c
			break;
 8000636:	e003      	b.n	8000640 <enable_GPIO_clock+0xac>
		default:
			printf("enable_GPIO_clock error invalid input, please input lower case a-h \n");
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <enable_GPIO_clock+0xb8>)
 800063a:	f000 fbe1 	bl	8000e00 <puts>
			break;
 800063e:	bf00      	nop
	}
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	08001540 	.word	0x08001540

08000650 <__NVIC_SetPriority>:
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	db0a      	blt.n	800067a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	490c      	ldr	r1, [pc, #48]	@ (800069c <__NVIC_SetPriority+0x4c>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	440b      	add	r3, r1
 8000674:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000678:	e00a      	b.n	8000690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4908      	ldr	r1, [pc, #32]	@ (80006a0 <__NVIC_SetPriority+0x50>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	3b04      	subs	r3, #4
 8000688:	0112      	lsls	r2, r2, #4
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	440b      	add	r3, r1
 800068e:	761a      	strb	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <System_Clock_Init>:

#include "stm32l476xx.h"
#include<stdio.h>
#include<stdint.h>

void System_Clock_Init(){
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
/*	Description:
 *
 */

	uint32_t HSITrim = 16;
 80006aa:	2310      	movs	r3, #16
 80006ac:	607b      	str	r3, [r7, #4]

	//Set flash wait states
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80006ae:	4b45      	ldr	r3, [pc, #276]	@ (80007c4 <System_Clock_Init+0x120>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a44      	ldr	r2, [pc, #272]	@ (80007c4 <System_Clock_Init+0x120>)
 80006b4:	f023 0307 	bic.w	r3, r3, #7
 80006b8:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_4WS;
 80006ba:	4b42      	ldr	r3, [pc, #264]	@ (80007c4 <System_Clock_Init+0x120>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a41      	ldr	r2, [pc, #260]	@ (80007c4 <System_Clock_Init+0x120>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6013      	str	r3, [r2, #0]
	//Configure HSI
	RCC->CR |= RCC_CR_HSION;
 80006c6:	4b40      	ldr	r3, [pc, #256]	@ (80007c8 <System_Clock_Init+0x124>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a3f      	ldr	r2, [pc, #252]	@ (80007c8 <System_Clock_Init+0x124>)
 80006cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006d0:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0); //wait for HSIRDY to be cleared
 80006d2:	bf00      	nop
 80006d4:	4b3c      	ldr	r3, [pc, #240]	@ (80007c8 <System_Clock_Init+0x124>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0f9      	beq.n	80006d4 <System_Clock_Init+0x30>
	//Calibrate HSI16
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80006e0:	4b39      	ldr	r3, [pc, #228]	@ (80007c8 <System_Clock_Init+0x124>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	4a38      	ldr	r2, [pc, #224]	@ (80007c8 <System_Clock_Init+0x124>)
 80006e6:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 80006ea:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << RCC_ICSCR_HSITRIM_Pos;
 80006ec:	4b36      	ldr	r3, [pc, #216]	@ (80007c8 <System_Clock_Init+0x124>)
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	061b      	lsls	r3, r3, #24
 80006f4:	4934      	ldr	r1, [pc, #208]	@ (80007c8 <System_Clock_Init+0x124>)
 80006f6:	4313      	orrs	r3, r2
 80006f8:	604b      	str	r3, [r1, #4]
	//Disable PLL
	RCC->CR &= ~RCC_CR_PLLON;
 80006fa:	4b33      	ldr	r3, [pc, #204]	@ (80007c8 <System_Clock_Init+0x124>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a32      	ldr	r2, [pc, #200]	@ (80007c8 <System_Clock_Init+0x124>)
 8000700:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000704:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY); //wait till PLLRDY is cleared
 8000706:	bf00      	nop
 8000708:	4b2f      	ldr	r3, [pc, #188]	@ (80007c8 <System_Clock_Init+0x124>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000710:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000714:	d0f8      	beq.n	8000708 <System_Clock_Init+0x64>
	//f(sys) = f(VCO)/PLLR
	//80MHz = 160/2; f(VCO) = 160 PLLR = 2
	//f(VCO) = f(PLL input) * (PLLN/PLLM)
	//160MHz = 16MHz * (PLLN/PLLM)
	//PLLN/PLLM = 10 = 20/2; PLLN = 20 PLLM = 2
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 8000716:	4b2c      	ldr	r3, [pc, #176]	@ (80007c8 <System_Clock_Init+0x124>)
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	4a2b      	ldr	r2, [pc, #172]	@ (80007c8 <System_Clock_Init+0x124>)
 800071c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000720:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= 20U << RCC_PLLCFGR_PLLN_Pos; //plln to 20
 8000722:	4b29      	ldr	r3, [pc, #164]	@ (80007c8 <System_Clock_Init+0x124>)
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	4a28      	ldr	r2, [pc, #160]	@ (80007c8 <System_Clock_Init+0x124>)
 8000728:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800072c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 800072e:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <System_Clock_Init+0x124>)
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	4a25      	ldr	r2, [pc, #148]	@ (80007c8 <System_Clock_Init+0x124>)
 8000734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000738:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= 1U << RCC_PLLCFGR_PLLM_Pos; //pllm to 2
 800073a:	4b23      	ldr	r3, [pc, #140]	@ (80007c8 <System_Clock_Init+0x124>)
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	4a22      	ldr	r2, [pc, #136]	@ (80007c8 <System_Clock_Init+0x124>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR; //pllr to 2
 8000746:	4b20      	ldr	r3, [pc, #128]	@ (80007c8 <System_Clock_Init+0x124>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	4a1f      	ldr	r2, [pc, #124]	@ (80007c8 <System_Clock_Init+0x124>)
 800074c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8000750:	60d3      	str	r3, [r2, #12]
	//set hsi as source for PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <System_Clock_Init+0x124>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	4a1c      	ldr	r2, [pc, #112]	@ (80007c8 <System_Clock_Init+0x124>)
 8000758:	f023 0303 	bic.w	r3, r3, #3
 800075c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <System_Clock_Init+0x124>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	4a19      	ldr	r2, [pc, #100]	@ (80007c8 <System_Clock_Init+0x124>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	60d3      	str	r3, [r2, #12]
	//Enable PLLR output
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <System_Clock_Init+0x124>)
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	4a16      	ldr	r2, [pc, #88]	@ (80007c8 <System_Clock_Init+0x124>)
 8000770:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000774:	60d3      	str	r3, [r2, #12]
	//Enable the PLL
	RCC->CR |= RCC_CR_PLLON;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <System_Clock_Init+0x124>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <System_Clock_Init+0x124>)
 800077c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000780:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0); //wait till PLLRDY is cleared
 8000782:	bf00      	nop
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <System_Clock_Init+0x124>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0f9      	beq.n	8000784 <System_Clock_Init+0xe0>
	//select PLL as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000790:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <System_Clock_Init+0x124>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	4a0c      	ldr	r2, [pc, #48]	@ (80007c8 <System_Clock_Init+0x124>)
 8000796:	f023 0303 	bic.w	r3, r3, #3
 800079a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800079c:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <System_Clock_Init+0x124>)
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	4a09      	ldr	r2, [pc, #36]	@ (80007c8 <System_Clock_Init+0x124>)
 80007a2:	f043 0303 	orr.w	r3, r3, #3
 80007a6:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); // wait till system clock is selected
 80007a8:	bf00      	nop
 80007aa:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <System_Clock_Init+0x124>)
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	f003 030c 	and.w	r3, r3, #12
 80007b2:	2b0c      	cmp	r3, #12
 80007b4:	d1f9      	bne.n	80007aa <System_Clock_Init+0x106>
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	40022000 	.word	0x40022000
 80007c8:	40021000 	.word	0x40021000

080007cc <SysTick_Init>:

void SysTick_Init(int ticks){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	/*Description:
	 *
	 */

	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; // Disable SysTick
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <SysTick_Init+0x58>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a12      	ldr	r2, [pc, #72]	@ (8000824 <SysTick_Init+0x58>)
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]
	SysTick->LOAD = ticks - 1; // Set reload register
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	1e5a      	subs	r2, r3, #1
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <SysTick_Init+0x58>)
 80007e6:	605a      	str	r2, [r3, #4]
	// Set interrupt priority of SysTick to least urgency (i.e., largest priority value)
	NVIC_SetPriority (SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
 80007e8:	210f      	movs	r1, #15
 80007ea:	f04f 30ff 	mov.w	r0, #4294967295
 80007ee:	f7ff ff2f 	bl	8000650 <__NVIC_SetPriority>
	SysTick->VAL = 0; // Reset the SysTick counter value
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <SysTick_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
	// Select processor clock to internal clock
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <SysTick_Init+0x58>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a09      	ldr	r2, [pc, #36]	@ (8000824 <SysTick_Init+0x58>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6013      	str	r3, [r2, #0]
	// Enables SysTick interrupt
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <SysTick_Init+0x58>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <SysTick_Init+0x58>)
 800080a:	f043 0302 	orr.w	r3, r3, #2
 800080e:	6013      	str	r3, [r2, #0]
	// Enable SysTick
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <SysTick_Init+0x58>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a03      	ldr	r2, [pc, #12]	@ (8000824 <SysTick_Init+0x58>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	e000e010 	.word	0xe000e010

08000828 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e00a      	b.n	8000850 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800083a:	f3af 8000 	nop.w
 800083e:	4601      	mov	r1, r0
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	60ba      	str	r2, [r7, #8]
 8000846:	b2ca      	uxtb	r2, r1
 8000848:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	3301      	adds	r3, #1
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697a      	ldr	r2, [r7, #20]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	429a      	cmp	r2, r3
 8000856:	dbf0      	blt.n	800083a <_read+0x12>
  }

  return len;
 8000858:	687b      	ldr	r3, [r7, #4]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	e009      	b.n	8000888 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	60ba      	str	r2, [r7, #8]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	3301      	adds	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	429a      	cmp	r2, r3
 800088e:	dbf1      	blt.n	8000874 <_write+0x12>
  }
  return len;
 8000890:	687b      	ldr	r3, [r7, #4]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <_close>:

int _close(int file)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008c2:	605a      	str	r2, [r3, #4]
  return 0;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <_isatty>:

int _isatty(int file)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800090c:	4a14      	ldr	r2, [pc, #80]	@ (8000960 <_sbrk+0x5c>)
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <_sbrk+0x60>)
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000918:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <_sbrk+0x64>)
 8000922:	4a12      	ldr	r2, [pc, #72]	@ (800096c <_sbrk+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	429a      	cmp	r2, r3
 8000932:	d207      	bcs.n	8000944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000934:	f000 fb92 	bl	800105c <__errno>
 8000938:	4603      	mov	r3, r0
 800093a:	220c      	movs	r2, #12
 800093c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	e009      	b.n	8000958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094a:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	4a05      	ldr	r2, [pc, #20]	@ (8000968 <_sbrk+0x64>)
 8000954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20018000 	.word	0x20018000
 8000964:	00000400 	.word	0x00000400
 8000968:	20000088 	.word	0x20000088
 800096c:	200001d8 	.word	0x200001d8

08000970 <__NVIC_EnableIRQ>:
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	db0b      	blt.n	800099a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 021f 	and.w	r2, r3, #31
 8000988:	4907      	ldr	r1, [pc, #28]	@ (80009a8 <__NVIC_EnableIRQ+0x38>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	2001      	movs	r0, #1
 8000992:	fa00 f202 	lsl.w	r2, r0, r2
 8000996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000e100 	.word	0xe000e100

080009ac <__NVIC_SetPriority>:
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	@ (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	@ (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <TIM4_Init>:
void reset_counterVal(){
	TIM4->CNT = 0;		// Reset the counter value to 0
}

// Simple 1kHz up counting timer (input)
void TIM4_Init(void){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;		// Enable the TIM4 clock
 8000a04:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <TIM4_Init+0x78>)
 8000a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a08:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <TIM4_Init+0x78>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6593      	str	r3, [r2, #88]	@ 0x58

	TIM4->CR1 &= ~TIM_CR1_CMS;					// Set the edge-aligned mode
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a19      	ldr	r2, [pc, #100]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a16:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000a1a:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~TIM_CR1_DIR;					// Up-counting mode (default)
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a22:	f023 0310 	bic.w	r3, r3, #16
 8000a26:	6013      	str	r3, [r2, #0]

	// Set the PSC and ARR fields to achieve a 1kHz output
	TIM4->PSC = 79999;		// Pre-scaler to divide 16 MHz clock to 1 kHz
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a2a:	4a15      	ldr	r2, [pc, #84]	@ (8000a80 <TIM4_Init+0x80>)
 8000a2c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 18000;		// Auto-reload for 3-second interrupt
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a30:	f244 6250 	movw	r2, #18000	@ 0x4650
 8000a34:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM4->CR2 &= ~TIM_CR2_MMS;			// No master mode output
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	4a10      	ldr	r2, [pc, #64]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000a40:	6053      	str	r3, [r2, #4]

	TIM4->CCER = 0;						// Disable all output channels
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
	TIM4->CCMR1 = 0;					// Reset capture/compare mode registers
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]

	TIM4->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM4_IRQn, 2);			// Set interrupt priority
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	201e      	movs	r0, #30
 8000a5e:	f7ff ffa5 	bl	80009ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);				// Enable TIM4 interrupt in NVIC
 8000a62:	201e      	movs	r0, #30
 8000a64:	f7ff ff84 	bl	8000970 <__NVIC_EnableIRQ>

	// Enable the timer
	TIM4->CR1 &= ~TIM_CR1_CEN;
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a03      	ldr	r2, [pc, #12]	@ (8000a7c <TIM4_Init+0x7c>)
 8000a6e:	f023 0301 	bic.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40000800 	.word	0x40000800
 8000a80:	0001387f 	.word	0x0001387f

08000a84 <TIM4_IRQHandler>:

// Interrupt handler code for the counter reaching 3 seconds
void TIM4_IRQHandler(void){
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF){		// Check if update interrupt flag
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <TIM4_IRQHandler+0x38>)
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00e      	beq.n	8000ab2 <TIM4_IRQHandler+0x2e>
		TIM4->CR1 &= ~TIM_CR1_CEN;	// Disable the timer
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <TIM4_IRQHandler+0x38>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <TIM4_IRQHandler+0x38>)
 8000a9a:	f023 0301 	bic.w	r3, r3, #1
 8000a9e:	6013      	str	r3, [r2, #0]
		timeout = 1;				// Set flag for timer disabled
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <TIM4_IRQHandler+0x3c>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
		TIM4->SR &= ~TIM_SR_UIF;	// Clear the interrupt flag
 8000aa6:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <TIM4_IRQHandler+0x38>)
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <TIM4_IRQHandler+0x38>)
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	6113      	str	r3, [r2, #16]
	}
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	40000800 	.word	0x40000800
 8000ac0:	20000000 	.word	0x20000000

08000ac4 <TIM3_Init>:

// Output timer to trigger buzzer
void TIM3_Init(void){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;		// Enable the TIM3 clock
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <TIM3_Init+0x78>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000acc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b3c <TIM3_Init+0x78>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	6593      	str	r3, [r2, #88]	@ 0x58

	TIM3->CR1 &= ~TIM_CR1_CMS;					// Set the edge-aligned mode
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <TIM3_Init+0x7c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <TIM3_Init+0x7c>)
 8000ada:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000ade:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~TIM_CR1_DIR;					// Up-counting mode (default)
 8000ae0:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <TIM3_Init+0x7c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a16      	ldr	r2, [pc, #88]	@ (8000b40 <TIM3_Init+0x7c>)
 8000ae6:	f023 0310 	bic.w	r3, r3, #16
 8000aea:	6013      	str	r3, [r2, #0]

	// Set the PSC and ARR fields to achieve a 1kHz output
	TIM3->PSC = 79999;		// Pre-scaler to divide 16 MHz clock to 1 kHz
 8000aec:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <TIM3_Init+0x7c>)
 8000aee:	4a15      	ldr	r2, [pc, #84]	@ (8000b44 <TIM3_Init+0x80>)
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 2999;		// Auto-reload for 3-second interrupt
 8000af2:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <TIM3_Init+0x7c>)
 8000af4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000af8:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM3->CR2 &= ~TIM_CR2_MMS;			// No master mode output
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <TIM3_Init+0x7c>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <TIM3_Init+0x7c>)
 8000b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b04:	6053      	str	r3, [r2, #4]

	TIM3->CCER = 0;						// Disable all output channels
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <TIM3_Init+0x7c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
	TIM3->CCMR1 = 0;					// Reset capture/compare mode registers
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <TIM3_Init+0x7c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]

	TIM3->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <TIM3_Init+0x7c>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <TIM3_Init+0x7c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM3_IRQn, 3);			// Set interrupt priority
 8000b1e:	2103      	movs	r1, #3
 8000b20:	201d      	movs	r0, #29
 8000b22:	f7ff ff43 	bl	80009ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);				// Enable TIM3 interrupt in NVIC
 8000b26:	201d      	movs	r0, #29
 8000b28:	f7ff ff22 	bl	8000970 <__NVIC_EnableIRQ>

	// Enable the timer
	TIM3->CR1 |= TIM_CR1_CEN;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <TIM3_Init+0x7c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a03      	ldr	r2, [pc, #12]	@ (8000b40 <TIM3_Init+0x7c>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40000400 	.word	0x40000400
 8000b44:	0001387f 	.word	0x0001387f

08000b48 <TIM3_IRQHandler>:
	TIM3->ARR = s;
	TIM3->CR1 |= TIM_CR1_CEN;
}

// Interrupt handler code to set beat = 1 on overflow
void TIM3_IRQHandler(void){
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_UIF){		// Check if update interrupt flag
 8000b4c:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <TIM3_IRQHandler+0x2c>)
 8000b4e:	691b      	ldr	r3, [r3, #16]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d008      	beq.n	8000b6a <TIM3_IRQHandler+0x22>
		beat = 1;
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <TIM3_IRQHandler+0x30>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
		TIM3->SR &= ~TIM_SR_UIF;	// Clear the interrupt flag
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <TIM3_IRQHandler+0x2c>)
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <TIM3_IRQHandler+0x2c>)
 8000b64:	f023 0301 	bic.w	r3, r3, #1
 8000b68:	6113      	str	r3, [r2, #16]
		// Set ARR to get_counterVal here? or assign in timer init?
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	40000400 	.word	0x40000400
 8000b78:	20000084 	.word	0x20000084

08000b7c <Reset_Handler>:
 8000b7c:	480d      	ldr	r0, [pc, #52]	@ (8000bb4 <LoopForever+0x2>)
 8000b7e:	4685      	mov	sp, r0
 8000b80:	f3af 8000 	nop.w
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <LoopForever+0x6>)
 8000b86:	490d      	ldr	r1, [pc, #52]	@ (8000bbc <LoopForever+0xa>)
 8000b88:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <LoopForever+0xe>)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:
 8000b8e:	58d4      	ldr	r4, [r2, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:
 8000b94:	18c4      	adds	r4, r0, r3
 8000b96:	428c      	cmp	r4, r1
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <LoopForever+0x12>)
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc8 <LoopForever+0x16>)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:
 8000ba6:	42a2      	cmp	r2, r4
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>
 8000baa:	f000 fa5d 	bl	8001068 <__libc_init_array>
 8000bae:	f7ff fc97 	bl	80004e0 <main>

08000bb2 <LoopForever>:
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
 8000bb4:	20018000 	.word	0x20018000
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000060 	.word	0x20000060
 8000bc0:	080015cc 	.word	0x080015cc
 8000bc4:	20000060 	.word	0x20000060
 8000bc8:	200001d8 	.word	0x200001d8

08000bcc <ADC1_2_IRQHandler>:
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>
	...

08000bd0 <std>:
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	b510      	push	{r4, lr}
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8000bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000bde:	6083      	str	r3, [r0, #8]
 8000be0:	8181      	strh	r1, [r0, #12]
 8000be2:	6643      	str	r3, [r0, #100]	@ 0x64
 8000be4:	81c2      	strh	r2, [r0, #14]
 8000be6:	6183      	str	r3, [r0, #24]
 8000be8:	4619      	mov	r1, r3
 8000bea:	2208      	movs	r2, #8
 8000bec:	305c      	adds	r0, #92	@ 0x5c
 8000bee:	f000 f9e7 	bl	8000fc0 <memset>
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <std+0x58>)
 8000bf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <std+0x5c>)
 8000bf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <std+0x60>)
 8000bfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <std+0x64>)
 8000c00:	6323      	str	r3, [r4, #48]	@ 0x30
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <std+0x68>)
 8000c04:	6224      	str	r4, [r4, #32]
 8000c06:	429c      	cmp	r4, r3
 8000c08:	d006      	beq.n	8000c18 <std+0x48>
 8000c0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000c0e:	4294      	cmp	r4, r2
 8000c10:	d002      	beq.n	8000c18 <std+0x48>
 8000c12:	33d0      	adds	r3, #208	@ 0xd0
 8000c14:	429c      	cmp	r4, r3
 8000c16:	d105      	bne.n	8000c24 <std+0x54>
 8000c18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c20:	f000 ba46 	b.w	80010b0 <__retarget_lock_init_recursive>
 8000c24:	bd10      	pop	{r4, pc}
 8000c26:	bf00      	nop
 8000c28:	08000e11 	.word	0x08000e11
 8000c2c:	08000e33 	.word	0x08000e33
 8000c30:	08000e6b 	.word	0x08000e6b
 8000c34:	08000e8f 	.word	0x08000e8f
 8000c38:	2000008c 	.word	0x2000008c

08000c3c <stdio_exit_handler>:
 8000c3c:	4a02      	ldr	r2, [pc, #8]	@ (8000c48 <stdio_exit_handler+0xc>)
 8000c3e:	4903      	ldr	r1, [pc, #12]	@ (8000c4c <stdio_exit_handler+0x10>)
 8000c40:	4803      	ldr	r0, [pc, #12]	@ (8000c50 <stdio_exit_handler+0x14>)
 8000c42:	f000 b869 	b.w	8000d18 <_fwalk_sglue>
 8000c46:	bf00      	nop
 8000c48:	20000004 	.word	0x20000004
 8000c4c:	080013b1 	.word	0x080013b1
 8000c50:	20000014 	.word	0x20000014

08000c54 <cleanup_stdio>:
 8000c54:	6841      	ldr	r1, [r0, #4]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <cleanup_stdio+0x34>)
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	b510      	push	{r4, lr}
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	d001      	beq.n	8000c64 <cleanup_stdio+0x10>
 8000c60:	f000 fba6 	bl	80013b0 <_fflush_r>
 8000c64:	68a1      	ldr	r1, [r4, #8]
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <cleanup_stdio+0x38>)
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	d002      	beq.n	8000c72 <cleanup_stdio+0x1e>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f000 fb9f 	bl	80013b0 <_fflush_r>
 8000c72:	68e1      	ldr	r1, [r4, #12]
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <cleanup_stdio+0x3c>)
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d004      	beq.n	8000c84 <cleanup_stdio+0x30>
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c80:	f000 bb96 	b.w	80013b0 <_fflush_r>
 8000c84:	bd10      	pop	{r4, pc}
 8000c86:	bf00      	nop
 8000c88:	2000008c 	.word	0x2000008c
 8000c8c:	200000f4 	.word	0x200000f4
 8000c90:	2000015c 	.word	0x2000015c

08000c94 <global_stdio_init.part.0>:
 8000c94:	b510      	push	{r4, lr}
 8000c96:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <global_stdio_init.part.0+0x30>)
 8000c98:	4c0b      	ldr	r4, [pc, #44]	@ (8000cc8 <global_stdio_init.part.0+0x34>)
 8000c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8000ccc <global_stdio_init.part.0+0x38>)
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	f7ff ff94 	bl	8000bd0 <std>
 8000ca8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000cac:	2201      	movs	r2, #1
 8000cae:	2109      	movs	r1, #9
 8000cb0:	f7ff ff8e 	bl	8000bd0 <std>
 8000cb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000cb8:	2202      	movs	r2, #2
 8000cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cbe:	2112      	movs	r1, #18
 8000cc0:	f7ff bf86 	b.w	8000bd0 <std>
 8000cc4:	200001c4 	.word	0x200001c4
 8000cc8:	2000008c 	.word	0x2000008c
 8000ccc:	08000c3d 	.word	0x08000c3d

08000cd0 <__sfp_lock_acquire>:
 8000cd0:	4801      	ldr	r0, [pc, #4]	@ (8000cd8 <__sfp_lock_acquire+0x8>)
 8000cd2:	f000 b9ee 	b.w	80010b2 <__retarget_lock_acquire_recursive>
 8000cd6:	bf00      	nop
 8000cd8:	200001cd 	.word	0x200001cd

08000cdc <__sfp_lock_release>:
 8000cdc:	4801      	ldr	r0, [pc, #4]	@ (8000ce4 <__sfp_lock_release+0x8>)
 8000cde:	f000 b9e9 	b.w	80010b4 <__retarget_lock_release_recursive>
 8000ce2:	bf00      	nop
 8000ce4:	200001cd 	.word	0x200001cd

08000ce8 <__sinit>:
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fff0 	bl	8000cd0 <__sfp_lock_acquire>
 8000cf0:	6a23      	ldr	r3, [r4, #32]
 8000cf2:	b11b      	cbz	r3, 8000cfc <__sinit+0x14>
 8000cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cf8:	f7ff bff0 	b.w	8000cdc <__sfp_lock_release>
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <__sinit+0x28>)
 8000cfe:	6223      	str	r3, [r4, #32]
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__sinit+0x2c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1f5      	bne.n	8000cf4 <__sinit+0xc>
 8000d08:	f7ff ffc4 	bl	8000c94 <global_stdio_init.part.0>
 8000d0c:	e7f2      	b.n	8000cf4 <__sinit+0xc>
 8000d0e:	bf00      	nop
 8000d10:	08000c55 	.word	0x08000c55
 8000d14:	200001c4 	.word	0x200001c4

08000d18 <_fwalk_sglue>:
 8000d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d1c:	4607      	mov	r7, r0
 8000d1e:	4688      	mov	r8, r1
 8000d20:	4614      	mov	r4, r2
 8000d22:	2600      	movs	r6, #0
 8000d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d28:	f1b9 0901 	subs.w	r9, r9, #1
 8000d2c:	d505      	bpl.n	8000d3a <_fwalk_sglue+0x22>
 8000d2e:	6824      	ldr	r4, [r4, #0]
 8000d30:	2c00      	cmp	r4, #0
 8000d32:	d1f7      	bne.n	8000d24 <_fwalk_sglue+0xc>
 8000d34:	4630      	mov	r0, r6
 8000d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d3a:	89ab      	ldrh	r3, [r5, #12]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d907      	bls.n	8000d50 <_fwalk_sglue+0x38>
 8000d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d44:	3301      	adds	r3, #1
 8000d46:	d003      	beq.n	8000d50 <_fwalk_sglue+0x38>
 8000d48:	4629      	mov	r1, r5
 8000d4a:	4638      	mov	r0, r7
 8000d4c:	47c0      	blx	r8
 8000d4e:	4306      	orrs	r6, r0
 8000d50:	3568      	adds	r5, #104	@ 0x68
 8000d52:	e7e9      	b.n	8000d28 <_fwalk_sglue+0x10>

08000d54 <_puts_r>:
 8000d54:	6a03      	ldr	r3, [r0, #32]
 8000d56:	b570      	push	{r4, r5, r6, lr}
 8000d58:	6884      	ldr	r4, [r0, #8]
 8000d5a:	4605      	mov	r5, r0
 8000d5c:	460e      	mov	r6, r1
 8000d5e:	b90b      	cbnz	r3, 8000d64 <_puts_r+0x10>
 8000d60:	f7ff ffc2 	bl	8000ce8 <__sinit>
 8000d64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d66:	07db      	lsls	r3, r3, #31
 8000d68:	d405      	bmi.n	8000d76 <_puts_r+0x22>
 8000d6a:	89a3      	ldrh	r3, [r4, #12]
 8000d6c:	0598      	lsls	r0, r3, #22
 8000d6e:	d402      	bmi.n	8000d76 <_puts_r+0x22>
 8000d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d72:	f000 f99e 	bl	80010b2 <__retarget_lock_acquire_recursive>
 8000d76:	89a3      	ldrh	r3, [r4, #12]
 8000d78:	0719      	lsls	r1, r3, #28
 8000d7a:	d502      	bpl.n	8000d82 <_puts_r+0x2e>
 8000d7c:	6923      	ldr	r3, [r4, #16]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d135      	bne.n	8000dee <_puts_r+0x9a>
 8000d82:	4621      	mov	r1, r4
 8000d84:	4628      	mov	r0, r5
 8000d86:	f000 f8c5 	bl	8000f14 <__swsetup_r>
 8000d8a:	b380      	cbz	r0, 8000dee <_puts_r+0x9a>
 8000d8c:	f04f 35ff 	mov.w	r5, #4294967295
 8000d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d92:	07da      	lsls	r2, r3, #31
 8000d94:	d405      	bmi.n	8000da2 <_puts_r+0x4e>
 8000d96:	89a3      	ldrh	r3, [r4, #12]
 8000d98:	059b      	lsls	r3, r3, #22
 8000d9a:	d402      	bmi.n	8000da2 <_puts_r+0x4e>
 8000d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d9e:	f000 f989 	bl	80010b4 <__retarget_lock_release_recursive>
 8000da2:	4628      	mov	r0, r5
 8000da4:	bd70      	pop	{r4, r5, r6, pc}
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	da04      	bge.n	8000db4 <_puts_r+0x60>
 8000daa:	69a2      	ldr	r2, [r4, #24]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dc17      	bgt.n	8000de0 <_puts_r+0x8c>
 8000db0:	290a      	cmp	r1, #10
 8000db2:	d015      	beq.n	8000de0 <_puts_r+0x8c>
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	6022      	str	r2, [r4, #0]
 8000dba:	7019      	strb	r1, [r3, #0]
 8000dbc:	68a3      	ldr	r3, [r4, #8]
 8000dbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	60a3      	str	r3, [r4, #8]
 8000dc6:	2900      	cmp	r1, #0
 8000dc8:	d1ed      	bne.n	8000da6 <_puts_r+0x52>
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da11      	bge.n	8000df2 <_puts_r+0x9e>
 8000dce:	4622      	mov	r2, r4
 8000dd0:	210a      	movs	r1, #10
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	f000 f85f 	bl	8000e96 <__swbuf_r>
 8000dd8:	3001      	adds	r0, #1
 8000dda:	d0d7      	beq.n	8000d8c <_puts_r+0x38>
 8000ddc:	250a      	movs	r5, #10
 8000dde:	e7d7      	b.n	8000d90 <_puts_r+0x3c>
 8000de0:	4622      	mov	r2, r4
 8000de2:	4628      	mov	r0, r5
 8000de4:	f000 f857 	bl	8000e96 <__swbuf_r>
 8000de8:	3001      	adds	r0, #1
 8000dea:	d1e7      	bne.n	8000dbc <_puts_r+0x68>
 8000dec:	e7ce      	b.n	8000d8c <_puts_r+0x38>
 8000dee:	3e01      	subs	r6, #1
 8000df0:	e7e4      	b.n	8000dbc <_puts_r+0x68>
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	6022      	str	r2, [r4, #0]
 8000df8:	220a      	movs	r2, #10
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e7ee      	b.n	8000ddc <_puts_r+0x88>
	...

08000e00 <puts>:
 8000e00:	4b02      	ldr	r3, [pc, #8]	@ (8000e0c <puts+0xc>)
 8000e02:	4601      	mov	r1, r0
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	f7ff bfa5 	b.w	8000d54 <_puts_r>
 8000e0a:	bf00      	nop
 8000e0c:	20000010 	.word	0x20000010

08000e10 <__sread>:
 8000e10:	b510      	push	{r4, lr}
 8000e12:	460c      	mov	r4, r1
 8000e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e18:	f000 f8fc 	bl	8001014 <_read_r>
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	bfab      	itete	ge
 8000e20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000e22:	89a3      	ldrhlt	r3, [r4, #12]
 8000e24:	181b      	addge	r3, r3, r0
 8000e26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000e2a:	bfac      	ite	ge
 8000e2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000e2e:	81a3      	strhlt	r3, [r4, #12]
 8000e30:	bd10      	pop	{r4, pc}

08000e32 <__swrite>:
 8000e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e36:	461f      	mov	r7, r3
 8000e38:	898b      	ldrh	r3, [r1, #12]
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	4605      	mov	r5, r0
 8000e3e:	460c      	mov	r4, r1
 8000e40:	4616      	mov	r6, r2
 8000e42:	d505      	bpl.n	8000e50 <__swrite+0x1e>
 8000e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e48:	2302      	movs	r3, #2
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f000 f8d0 	bl	8000ff0 <_lseek_r>
 8000e50:	89a3      	ldrh	r3, [r4, #12]
 8000e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e5a:	81a3      	strh	r3, [r4, #12]
 8000e5c:	4632      	mov	r2, r6
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4628      	mov	r0, r5
 8000e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e66:	f000 b8e7 	b.w	8001038 <_write_r>

08000e6a <__sseek>:
 8000e6a:	b510      	push	{r4, lr}
 8000e6c:	460c      	mov	r4, r1
 8000e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e72:	f000 f8bd 	bl	8000ff0 <_lseek_r>
 8000e76:	1c43      	adds	r3, r0, #1
 8000e78:	89a3      	ldrh	r3, [r4, #12]
 8000e7a:	bf15      	itete	ne
 8000e7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000e7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000e82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000e86:	81a3      	strheq	r3, [r4, #12]
 8000e88:	bf18      	it	ne
 8000e8a:	81a3      	strhne	r3, [r4, #12]
 8000e8c:	bd10      	pop	{r4, pc}

08000e8e <__sclose>:
 8000e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e92:	f000 b89d 	b.w	8000fd0 <_close_r>

08000e96 <__swbuf_r>:
 8000e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e98:	460e      	mov	r6, r1
 8000e9a:	4614      	mov	r4, r2
 8000e9c:	4605      	mov	r5, r0
 8000e9e:	b118      	cbz	r0, 8000ea8 <__swbuf_r+0x12>
 8000ea0:	6a03      	ldr	r3, [r0, #32]
 8000ea2:	b90b      	cbnz	r3, 8000ea8 <__swbuf_r+0x12>
 8000ea4:	f7ff ff20 	bl	8000ce8 <__sinit>
 8000ea8:	69a3      	ldr	r3, [r4, #24]
 8000eaa:	60a3      	str	r3, [r4, #8]
 8000eac:	89a3      	ldrh	r3, [r4, #12]
 8000eae:	071a      	lsls	r2, r3, #28
 8000eb0:	d501      	bpl.n	8000eb6 <__swbuf_r+0x20>
 8000eb2:	6923      	ldr	r3, [r4, #16]
 8000eb4:	b943      	cbnz	r3, 8000ec8 <__swbuf_r+0x32>
 8000eb6:	4621      	mov	r1, r4
 8000eb8:	4628      	mov	r0, r5
 8000eba:	f000 f82b 	bl	8000f14 <__swsetup_r>
 8000ebe:	b118      	cbz	r0, 8000ec8 <__swbuf_r+0x32>
 8000ec0:	f04f 37ff 	mov.w	r7, #4294967295
 8000ec4:	4638      	mov	r0, r7
 8000ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	6922      	ldr	r2, [r4, #16]
 8000ecc:	1a98      	subs	r0, r3, r2
 8000ece:	6963      	ldr	r3, [r4, #20]
 8000ed0:	b2f6      	uxtb	r6, r6
 8000ed2:	4283      	cmp	r3, r0
 8000ed4:	4637      	mov	r7, r6
 8000ed6:	dc05      	bgt.n	8000ee4 <__swbuf_r+0x4e>
 8000ed8:	4621      	mov	r1, r4
 8000eda:	4628      	mov	r0, r5
 8000edc:	f000 fa68 	bl	80013b0 <_fflush_r>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d1ed      	bne.n	8000ec0 <__swbuf_r+0x2a>
 8000ee4:	68a3      	ldr	r3, [r4, #8]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	60a3      	str	r3, [r4, #8]
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	6022      	str	r2, [r4, #0]
 8000ef0:	701e      	strb	r6, [r3, #0]
 8000ef2:	6962      	ldr	r2, [r4, #20]
 8000ef4:	1c43      	adds	r3, r0, #1
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d004      	beq.n	8000f04 <__swbuf_r+0x6e>
 8000efa:	89a3      	ldrh	r3, [r4, #12]
 8000efc:	07db      	lsls	r3, r3, #31
 8000efe:	d5e1      	bpl.n	8000ec4 <__swbuf_r+0x2e>
 8000f00:	2e0a      	cmp	r6, #10
 8000f02:	d1df      	bne.n	8000ec4 <__swbuf_r+0x2e>
 8000f04:	4621      	mov	r1, r4
 8000f06:	4628      	mov	r0, r5
 8000f08:	f000 fa52 	bl	80013b0 <_fflush_r>
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d0d9      	beq.n	8000ec4 <__swbuf_r+0x2e>
 8000f10:	e7d6      	b.n	8000ec0 <__swbuf_r+0x2a>
	...

08000f14 <__swsetup_r>:
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	4b29      	ldr	r3, [pc, #164]	@ (8000fbc <__swsetup_r+0xa8>)
 8000f18:	4605      	mov	r5, r0
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	460c      	mov	r4, r1
 8000f1e:	b118      	cbz	r0, 8000f28 <__swsetup_r+0x14>
 8000f20:	6a03      	ldr	r3, [r0, #32]
 8000f22:	b90b      	cbnz	r3, 8000f28 <__swsetup_r+0x14>
 8000f24:	f7ff fee0 	bl	8000ce8 <__sinit>
 8000f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f2c:	0719      	lsls	r1, r3, #28
 8000f2e:	d422      	bmi.n	8000f76 <__swsetup_r+0x62>
 8000f30:	06da      	lsls	r2, r3, #27
 8000f32:	d407      	bmi.n	8000f44 <__swsetup_r+0x30>
 8000f34:	2209      	movs	r2, #9
 8000f36:	602a      	str	r2, [r5, #0]
 8000f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f3c:	81a3      	strh	r3, [r4, #12]
 8000f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f42:	e033      	b.n	8000fac <__swsetup_r+0x98>
 8000f44:	0758      	lsls	r0, r3, #29
 8000f46:	d512      	bpl.n	8000f6e <__swsetup_r+0x5a>
 8000f48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000f4a:	b141      	cbz	r1, 8000f5e <__swsetup_r+0x4a>
 8000f4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000f50:	4299      	cmp	r1, r3
 8000f52:	d002      	beq.n	8000f5a <__swsetup_r+0x46>
 8000f54:	4628      	mov	r0, r5
 8000f56:	f000 f8af 	bl	80010b8 <_free_r>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000f5e:	89a3      	ldrh	r3, [r4, #12]
 8000f60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000f64:	81a3      	strh	r3, [r4, #12]
 8000f66:	2300      	movs	r3, #0
 8000f68:	6063      	str	r3, [r4, #4]
 8000f6a:	6923      	ldr	r3, [r4, #16]
 8000f6c:	6023      	str	r3, [r4, #0]
 8000f6e:	89a3      	ldrh	r3, [r4, #12]
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	81a3      	strh	r3, [r4, #12]
 8000f76:	6923      	ldr	r3, [r4, #16]
 8000f78:	b94b      	cbnz	r3, 8000f8e <__swsetup_r+0x7a>
 8000f7a:	89a3      	ldrh	r3, [r4, #12]
 8000f7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f84:	d003      	beq.n	8000f8e <__swsetup_r+0x7a>
 8000f86:	4621      	mov	r1, r4
 8000f88:	4628      	mov	r0, r5
 8000f8a:	f000 fa5f 	bl	800144c <__smakebuf_r>
 8000f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f92:	f013 0201 	ands.w	r2, r3, #1
 8000f96:	d00a      	beq.n	8000fae <__swsetup_r+0x9a>
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60a2      	str	r2, [r4, #8]
 8000f9c:	6962      	ldr	r2, [r4, #20]
 8000f9e:	4252      	negs	r2, r2
 8000fa0:	61a2      	str	r2, [r4, #24]
 8000fa2:	6922      	ldr	r2, [r4, #16]
 8000fa4:	b942      	cbnz	r2, 8000fb8 <__swsetup_r+0xa4>
 8000fa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000faa:	d1c5      	bne.n	8000f38 <__swsetup_r+0x24>
 8000fac:	bd38      	pop	{r3, r4, r5, pc}
 8000fae:	0799      	lsls	r1, r3, #30
 8000fb0:	bf58      	it	pl
 8000fb2:	6962      	ldrpl	r2, [r4, #20]
 8000fb4:	60a2      	str	r2, [r4, #8]
 8000fb6:	e7f4      	b.n	8000fa2 <__swsetup_r+0x8e>
 8000fb8:	2000      	movs	r0, #0
 8000fba:	e7f7      	b.n	8000fac <__swsetup_r+0x98>
 8000fbc:	20000010 	.word	0x20000010

08000fc0 <memset>:
 8000fc0:	4402      	add	r2, r0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d100      	bne.n	8000fca <memset+0xa>
 8000fc8:	4770      	bx	lr
 8000fca:	f803 1b01 	strb.w	r1, [r3], #1
 8000fce:	e7f9      	b.n	8000fc4 <memset+0x4>

08000fd0 <_close_r>:
 8000fd0:	b538      	push	{r3, r4, r5, lr}
 8000fd2:	4d06      	ldr	r5, [pc, #24]	@ (8000fec <_close_r+0x1c>)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	4608      	mov	r0, r1
 8000fda:	602b      	str	r3, [r5, #0]
 8000fdc:	f7ff fc5d 	bl	800089a <_close>
 8000fe0:	1c43      	adds	r3, r0, #1
 8000fe2:	d102      	bne.n	8000fea <_close_r+0x1a>
 8000fe4:	682b      	ldr	r3, [r5, #0]
 8000fe6:	b103      	cbz	r3, 8000fea <_close_r+0x1a>
 8000fe8:	6023      	str	r3, [r4, #0]
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	200001c8 	.word	0x200001c8

08000ff0 <_lseek_r>:
 8000ff0:	b538      	push	{r3, r4, r5, lr}
 8000ff2:	4d07      	ldr	r5, [pc, #28]	@ (8001010 <_lseek_r+0x20>)
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	602a      	str	r2, [r5, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	f7ff fc72 	bl	80008e8 <_lseek>
 8001004:	1c43      	adds	r3, r0, #1
 8001006:	d102      	bne.n	800100e <_lseek_r+0x1e>
 8001008:	682b      	ldr	r3, [r5, #0]
 800100a:	b103      	cbz	r3, 800100e <_lseek_r+0x1e>
 800100c:	6023      	str	r3, [r4, #0]
 800100e:	bd38      	pop	{r3, r4, r5, pc}
 8001010:	200001c8 	.word	0x200001c8

08001014 <_read_r>:
 8001014:	b538      	push	{r3, r4, r5, lr}
 8001016:	4d07      	ldr	r5, [pc, #28]	@ (8001034 <_read_r+0x20>)
 8001018:	4604      	mov	r4, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4611      	mov	r1, r2
 800101e:	2200      	movs	r2, #0
 8001020:	602a      	str	r2, [r5, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	f7ff fc00 	bl	8000828 <_read>
 8001028:	1c43      	adds	r3, r0, #1
 800102a:	d102      	bne.n	8001032 <_read_r+0x1e>
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	b103      	cbz	r3, 8001032 <_read_r+0x1e>
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	bd38      	pop	{r3, r4, r5, pc}
 8001034:	200001c8 	.word	0x200001c8

08001038 <_write_r>:
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	4d07      	ldr	r5, [pc, #28]	@ (8001058 <_write_r+0x20>)
 800103c:	4604      	mov	r4, r0
 800103e:	4608      	mov	r0, r1
 8001040:	4611      	mov	r1, r2
 8001042:	2200      	movs	r2, #0
 8001044:	602a      	str	r2, [r5, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	f7ff fc0b 	bl	8000862 <_write>
 800104c:	1c43      	adds	r3, r0, #1
 800104e:	d102      	bne.n	8001056 <_write_r+0x1e>
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	b103      	cbz	r3, 8001056 <_write_r+0x1e>
 8001054:	6023      	str	r3, [r4, #0]
 8001056:	bd38      	pop	{r3, r4, r5, pc}
 8001058:	200001c8 	.word	0x200001c8

0800105c <__errno>:
 800105c:	4b01      	ldr	r3, [pc, #4]	@ (8001064 <__errno+0x8>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000010 	.word	0x20000010

08001068 <__libc_init_array>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	4d0d      	ldr	r5, [pc, #52]	@ (80010a0 <__libc_init_array+0x38>)
 800106c:	4c0d      	ldr	r4, [pc, #52]	@ (80010a4 <__libc_init_array+0x3c>)
 800106e:	1b64      	subs	r4, r4, r5
 8001070:	10a4      	asrs	r4, r4, #2
 8001072:	2600      	movs	r6, #0
 8001074:	42a6      	cmp	r6, r4
 8001076:	d109      	bne.n	800108c <__libc_init_array+0x24>
 8001078:	4d0b      	ldr	r5, [pc, #44]	@ (80010a8 <__libc_init_array+0x40>)
 800107a:	4c0c      	ldr	r4, [pc, #48]	@ (80010ac <__libc_init_array+0x44>)
 800107c:	f000 fa54 	bl	8001528 <_init>
 8001080:	1b64      	subs	r4, r4, r5
 8001082:	10a4      	asrs	r4, r4, #2
 8001084:	2600      	movs	r6, #0
 8001086:	42a6      	cmp	r6, r4
 8001088:	d105      	bne.n	8001096 <__libc_init_array+0x2e>
 800108a:	bd70      	pop	{r4, r5, r6, pc}
 800108c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001090:	4798      	blx	r3
 8001092:	3601      	adds	r6, #1
 8001094:	e7ee      	b.n	8001074 <__libc_init_array+0xc>
 8001096:	f855 3b04 	ldr.w	r3, [r5], #4
 800109a:	4798      	blx	r3
 800109c:	3601      	adds	r6, #1
 800109e:	e7f2      	b.n	8001086 <__libc_init_array+0x1e>
 80010a0:	080015c4 	.word	0x080015c4
 80010a4:	080015c4 	.word	0x080015c4
 80010a8:	080015c4 	.word	0x080015c4
 80010ac:	080015c8 	.word	0x080015c8

080010b0 <__retarget_lock_init_recursive>:
 80010b0:	4770      	bx	lr

080010b2 <__retarget_lock_acquire_recursive>:
 80010b2:	4770      	bx	lr

080010b4 <__retarget_lock_release_recursive>:
 80010b4:	4770      	bx	lr
	...

080010b8 <_free_r>:
 80010b8:	b538      	push	{r3, r4, r5, lr}
 80010ba:	4605      	mov	r5, r0
 80010bc:	2900      	cmp	r1, #0
 80010be:	d041      	beq.n	8001144 <_free_r+0x8c>
 80010c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010c4:	1f0c      	subs	r4, r1, #4
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bfb8      	it	lt
 80010ca:	18e4      	addlt	r4, r4, r3
 80010cc:	f000 f8e0 	bl	8001290 <__malloc_lock>
 80010d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001148 <_free_r+0x90>)
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	b933      	cbnz	r3, 80010e4 <_free_r+0x2c>
 80010d6:	6063      	str	r3, [r4, #4]
 80010d8:	6014      	str	r4, [r2, #0]
 80010da:	4628      	mov	r0, r5
 80010dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010e0:	f000 b8dc 	b.w	800129c <__malloc_unlock>
 80010e4:	42a3      	cmp	r3, r4
 80010e6:	d908      	bls.n	80010fa <_free_r+0x42>
 80010e8:	6820      	ldr	r0, [r4, #0]
 80010ea:	1821      	adds	r1, r4, r0
 80010ec:	428b      	cmp	r3, r1
 80010ee:	bf01      	itttt	eq
 80010f0:	6819      	ldreq	r1, [r3, #0]
 80010f2:	685b      	ldreq	r3, [r3, #4]
 80010f4:	1809      	addeq	r1, r1, r0
 80010f6:	6021      	streq	r1, [r4, #0]
 80010f8:	e7ed      	b.n	80010d6 <_free_r+0x1e>
 80010fa:	461a      	mov	r2, r3
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	b10b      	cbz	r3, 8001104 <_free_r+0x4c>
 8001100:	42a3      	cmp	r3, r4
 8001102:	d9fa      	bls.n	80010fa <_free_r+0x42>
 8001104:	6811      	ldr	r1, [r2, #0]
 8001106:	1850      	adds	r0, r2, r1
 8001108:	42a0      	cmp	r0, r4
 800110a:	d10b      	bne.n	8001124 <_free_r+0x6c>
 800110c:	6820      	ldr	r0, [r4, #0]
 800110e:	4401      	add	r1, r0
 8001110:	1850      	adds	r0, r2, r1
 8001112:	4283      	cmp	r3, r0
 8001114:	6011      	str	r1, [r2, #0]
 8001116:	d1e0      	bne.n	80010da <_free_r+0x22>
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	6053      	str	r3, [r2, #4]
 800111e:	4408      	add	r0, r1
 8001120:	6010      	str	r0, [r2, #0]
 8001122:	e7da      	b.n	80010da <_free_r+0x22>
 8001124:	d902      	bls.n	800112c <_free_r+0x74>
 8001126:	230c      	movs	r3, #12
 8001128:	602b      	str	r3, [r5, #0]
 800112a:	e7d6      	b.n	80010da <_free_r+0x22>
 800112c:	6820      	ldr	r0, [r4, #0]
 800112e:	1821      	adds	r1, r4, r0
 8001130:	428b      	cmp	r3, r1
 8001132:	bf04      	itt	eq
 8001134:	6819      	ldreq	r1, [r3, #0]
 8001136:	685b      	ldreq	r3, [r3, #4]
 8001138:	6063      	str	r3, [r4, #4]
 800113a:	bf04      	itt	eq
 800113c:	1809      	addeq	r1, r1, r0
 800113e:	6021      	streq	r1, [r4, #0]
 8001140:	6054      	str	r4, [r2, #4]
 8001142:	e7ca      	b.n	80010da <_free_r+0x22>
 8001144:	bd38      	pop	{r3, r4, r5, pc}
 8001146:	bf00      	nop
 8001148:	200001d4 	.word	0x200001d4

0800114c <sbrk_aligned>:
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	4e0f      	ldr	r6, [pc, #60]	@ (800118c <sbrk_aligned+0x40>)
 8001150:	460c      	mov	r4, r1
 8001152:	6831      	ldr	r1, [r6, #0]
 8001154:	4605      	mov	r5, r0
 8001156:	b911      	cbnz	r1, 800115e <sbrk_aligned+0x12>
 8001158:	f000 f9d6 	bl	8001508 <_sbrk_r>
 800115c:	6030      	str	r0, [r6, #0]
 800115e:	4621      	mov	r1, r4
 8001160:	4628      	mov	r0, r5
 8001162:	f000 f9d1 	bl	8001508 <_sbrk_r>
 8001166:	1c43      	adds	r3, r0, #1
 8001168:	d103      	bne.n	8001172 <sbrk_aligned+0x26>
 800116a:	f04f 34ff 	mov.w	r4, #4294967295
 800116e:	4620      	mov	r0, r4
 8001170:	bd70      	pop	{r4, r5, r6, pc}
 8001172:	1cc4      	adds	r4, r0, #3
 8001174:	f024 0403 	bic.w	r4, r4, #3
 8001178:	42a0      	cmp	r0, r4
 800117a:	d0f8      	beq.n	800116e <sbrk_aligned+0x22>
 800117c:	1a21      	subs	r1, r4, r0
 800117e:	4628      	mov	r0, r5
 8001180:	f000 f9c2 	bl	8001508 <_sbrk_r>
 8001184:	3001      	adds	r0, #1
 8001186:	d1f2      	bne.n	800116e <sbrk_aligned+0x22>
 8001188:	e7ef      	b.n	800116a <sbrk_aligned+0x1e>
 800118a:	bf00      	nop
 800118c:	200001d0 	.word	0x200001d0

08001190 <_malloc_r>:
 8001190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001194:	1ccd      	adds	r5, r1, #3
 8001196:	f025 0503 	bic.w	r5, r5, #3
 800119a:	3508      	adds	r5, #8
 800119c:	2d0c      	cmp	r5, #12
 800119e:	bf38      	it	cc
 80011a0:	250c      	movcc	r5, #12
 80011a2:	2d00      	cmp	r5, #0
 80011a4:	4606      	mov	r6, r0
 80011a6:	db01      	blt.n	80011ac <_malloc_r+0x1c>
 80011a8:	42a9      	cmp	r1, r5
 80011aa:	d904      	bls.n	80011b6 <_malloc_r+0x26>
 80011ac:	230c      	movs	r3, #12
 80011ae:	6033      	str	r3, [r6, #0]
 80011b0:	2000      	movs	r0, #0
 80011b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800128c <_malloc_r+0xfc>
 80011ba:	f000 f869 	bl	8001290 <__malloc_lock>
 80011be:	f8d8 3000 	ldr.w	r3, [r8]
 80011c2:	461c      	mov	r4, r3
 80011c4:	bb44      	cbnz	r4, 8001218 <_malloc_r+0x88>
 80011c6:	4629      	mov	r1, r5
 80011c8:	4630      	mov	r0, r6
 80011ca:	f7ff ffbf 	bl	800114c <sbrk_aligned>
 80011ce:	1c43      	adds	r3, r0, #1
 80011d0:	4604      	mov	r4, r0
 80011d2:	d158      	bne.n	8001286 <_malloc_r+0xf6>
 80011d4:	f8d8 4000 	ldr.w	r4, [r8]
 80011d8:	4627      	mov	r7, r4
 80011da:	2f00      	cmp	r7, #0
 80011dc:	d143      	bne.n	8001266 <_malloc_r+0xd6>
 80011de:	2c00      	cmp	r4, #0
 80011e0:	d04b      	beq.n	800127a <_malloc_r+0xea>
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	4639      	mov	r1, r7
 80011e6:	4630      	mov	r0, r6
 80011e8:	eb04 0903 	add.w	r9, r4, r3
 80011ec:	f000 f98c 	bl	8001508 <_sbrk_r>
 80011f0:	4581      	cmp	r9, r0
 80011f2:	d142      	bne.n	800127a <_malloc_r+0xea>
 80011f4:	6821      	ldr	r1, [r4, #0]
 80011f6:	1a6d      	subs	r5, r5, r1
 80011f8:	4629      	mov	r1, r5
 80011fa:	4630      	mov	r0, r6
 80011fc:	f7ff ffa6 	bl	800114c <sbrk_aligned>
 8001200:	3001      	adds	r0, #1
 8001202:	d03a      	beq.n	800127a <_malloc_r+0xea>
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	442b      	add	r3, r5
 8001208:	6023      	str	r3, [r4, #0]
 800120a:	f8d8 3000 	ldr.w	r3, [r8]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	bb62      	cbnz	r2, 800126c <_malloc_r+0xdc>
 8001212:	f8c8 7000 	str.w	r7, [r8]
 8001216:	e00f      	b.n	8001238 <_malloc_r+0xa8>
 8001218:	6822      	ldr	r2, [r4, #0]
 800121a:	1b52      	subs	r2, r2, r5
 800121c:	d420      	bmi.n	8001260 <_malloc_r+0xd0>
 800121e:	2a0b      	cmp	r2, #11
 8001220:	d917      	bls.n	8001252 <_malloc_r+0xc2>
 8001222:	1961      	adds	r1, r4, r5
 8001224:	42a3      	cmp	r3, r4
 8001226:	6025      	str	r5, [r4, #0]
 8001228:	bf18      	it	ne
 800122a:	6059      	strne	r1, [r3, #4]
 800122c:	6863      	ldr	r3, [r4, #4]
 800122e:	bf08      	it	eq
 8001230:	f8c8 1000 	streq.w	r1, [r8]
 8001234:	5162      	str	r2, [r4, r5]
 8001236:	604b      	str	r3, [r1, #4]
 8001238:	4630      	mov	r0, r6
 800123a:	f000 f82f 	bl	800129c <__malloc_unlock>
 800123e:	f104 000b 	add.w	r0, r4, #11
 8001242:	1d23      	adds	r3, r4, #4
 8001244:	f020 0007 	bic.w	r0, r0, #7
 8001248:	1ac2      	subs	r2, r0, r3
 800124a:	bf1c      	itt	ne
 800124c:	1a1b      	subne	r3, r3, r0
 800124e:	50a3      	strne	r3, [r4, r2]
 8001250:	e7af      	b.n	80011b2 <_malloc_r+0x22>
 8001252:	6862      	ldr	r2, [r4, #4]
 8001254:	42a3      	cmp	r3, r4
 8001256:	bf0c      	ite	eq
 8001258:	f8c8 2000 	streq.w	r2, [r8]
 800125c:	605a      	strne	r2, [r3, #4]
 800125e:	e7eb      	b.n	8001238 <_malloc_r+0xa8>
 8001260:	4623      	mov	r3, r4
 8001262:	6864      	ldr	r4, [r4, #4]
 8001264:	e7ae      	b.n	80011c4 <_malloc_r+0x34>
 8001266:	463c      	mov	r4, r7
 8001268:	687f      	ldr	r7, [r7, #4]
 800126a:	e7b6      	b.n	80011da <_malloc_r+0x4a>
 800126c:	461a      	mov	r2, r3
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	42a3      	cmp	r3, r4
 8001272:	d1fb      	bne.n	800126c <_malloc_r+0xdc>
 8001274:	2300      	movs	r3, #0
 8001276:	6053      	str	r3, [r2, #4]
 8001278:	e7de      	b.n	8001238 <_malloc_r+0xa8>
 800127a:	230c      	movs	r3, #12
 800127c:	6033      	str	r3, [r6, #0]
 800127e:	4630      	mov	r0, r6
 8001280:	f000 f80c 	bl	800129c <__malloc_unlock>
 8001284:	e794      	b.n	80011b0 <_malloc_r+0x20>
 8001286:	6005      	str	r5, [r0, #0]
 8001288:	e7d6      	b.n	8001238 <_malloc_r+0xa8>
 800128a:	bf00      	nop
 800128c:	200001d4 	.word	0x200001d4

08001290 <__malloc_lock>:
 8001290:	4801      	ldr	r0, [pc, #4]	@ (8001298 <__malloc_lock+0x8>)
 8001292:	f7ff bf0e 	b.w	80010b2 <__retarget_lock_acquire_recursive>
 8001296:	bf00      	nop
 8001298:	200001cc 	.word	0x200001cc

0800129c <__malloc_unlock>:
 800129c:	4801      	ldr	r0, [pc, #4]	@ (80012a4 <__malloc_unlock+0x8>)
 800129e:	f7ff bf09 	b.w	80010b4 <__retarget_lock_release_recursive>
 80012a2:	bf00      	nop
 80012a4:	200001cc 	.word	0x200001cc

080012a8 <__sflush_r>:
 80012a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80012ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b0:	0716      	lsls	r6, r2, #28
 80012b2:	4605      	mov	r5, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	d454      	bmi.n	8001362 <__sflush_r+0xba>
 80012b8:	684b      	ldr	r3, [r1, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	dc02      	bgt.n	80012c4 <__sflush_r+0x1c>
 80012be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dd48      	ble.n	8001356 <__sflush_r+0xae>
 80012c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012c6:	2e00      	cmp	r6, #0
 80012c8:	d045      	beq.n	8001356 <__sflush_r+0xae>
 80012ca:	2300      	movs	r3, #0
 80012cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80012d0:	682f      	ldr	r7, [r5, #0]
 80012d2:	6a21      	ldr	r1, [r4, #32]
 80012d4:	602b      	str	r3, [r5, #0]
 80012d6:	d030      	beq.n	800133a <__sflush_r+0x92>
 80012d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012da:	89a3      	ldrh	r3, [r4, #12]
 80012dc:	0759      	lsls	r1, r3, #29
 80012de:	d505      	bpl.n	80012ec <__sflush_r+0x44>
 80012e0:	6863      	ldr	r3, [r4, #4]
 80012e2:	1ad2      	subs	r2, r2, r3
 80012e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012e6:	b10b      	cbz	r3, 80012ec <__sflush_r+0x44>
 80012e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012ea:	1ad2      	subs	r2, r2, r3
 80012ec:	2300      	movs	r3, #0
 80012ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012f0:	6a21      	ldr	r1, [r4, #32]
 80012f2:	4628      	mov	r0, r5
 80012f4:	47b0      	blx	r6
 80012f6:	1c43      	adds	r3, r0, #1
 80012f8:	89a3      	ldrh	r3, [r4, #12]
 80012fa:	d106      	bne.n	800130a <__sflush_r+0x62>
 80012fc:	6829      	ldr	r1, [r5, #0]
 80012fe:	291d      	cmp	r1, #29
 8001300:	d82b      	bhi.n	800135a <__sflush_r+0xb2>
 8001302:	4a2a      	ldr	r2, [pc, #168]	@ (80013ac <__sflush_r+0x104>)
 8001304:	410a      	asrs	r2, r1
 8001306:	07d6      	lsls	r6, r2, #31
 8001308:	d427      	bmi.n	800135a <__sflush_r+0xb2>
 800130a:	2200      	movs	r2, #0
 800130c:	6062      	str	r2, [r4, #4]
 800130e:	04d9      	lsls	r1, r3, #19
 8001310:	6922      	ldr	r2, [r4, #16]
 8001312:	6022      	str	r2, [r4, #0]
 8001314:	d504      	bpl.n	8001320 <__sflush_r+0x78>
 8001316:	1c42      	adds	r2, r0, #1
 8001318:	d101      	bne.n	800131e <__sflush_r+0x76>
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	b903      	cbnz	r3, 8001320 <__sflush_r+0x78>
 800131e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001322:	602f      	str	r7, [r5, #0]
 8001324:	b1b9      	cbz	r1, 8001356 <__sflush_r+0xae>
 8001326:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800132a:	4299      	cmp	r1, r3
 800132c:	d002      	beq.n	8001334 <__sflush_r+0x8c>
 800132e:	4628      	mov	r0, r5
 8001330:	f7ff fec2 	bl	80010b8 <_free_r>
 8001334:	2300      	movs	r3, #0
 8001336:	6363      	str	r3, [r4, #52]	@ 0x34
 8001338:	e00d      	b.n	8001356 <__sflush_r+0xae>
 800133a:	2301      	movs	r3, #1
 800133c:	4628      	mov	r0, r5
 800133e:	47b0      	blx	r6
 8001340:	4602      	mov	r2, r0
 8001342:	1c50      	adds	r0, r2, #1
 8001344:	d1c9      	bne.n	80012da <__sflush_r+0x32>
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0c6      	beq.n	80012da <__sflush_r+0x32>
 800134c:	2b1d      	cmp	r3, #29
 800134e:	d001      	beq.n	8001354 <__sflush_r+0xac>
 8001350:	2b16      	cmp	r3, #22
 8001352:	d11e      	bne.n	8001392 <__sflush_r+0xea>
 8001354:	602f      	str	r7, [r5, #0]
 8001356:	2000      	movs	r0, #0
 8001358:	e022      	b.n	80013a0 <__sflush_r+0xf8>
 800135a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800135e:	b21b      	sxth	r3, r3
 8001360:	e01b      	b.n	800139a <__sflush_r+0xf2>
 8001362:	690f      	ldr	r7, [r1, #16]
 8001364:	2f00      	cmp	r7, #0
 8001366:	d0f6      	beq.n	8001356 <__sflush_r+0xae>
 8001368:	0793      	lsls	r3, r2, #30
 800136a:	680e      	ldr	r6, [r1, #0]
 800136c:	bf08      	it	eq
 800136e:	694b      	ldreq	r3, [r1, #20]
 8001370:	600f      	str	r7, [r1, #0]
 8001372:	bf18      	it	ne
 8001374:	2300      	movne	r3, #0
 8001376:	eba6 0807 	sub.w	r8, r6, r7
 800137a:	608b      	str	r3, [r1, #8]
 800137c:	f1b8 0f00 	cmp.w	r8, #0
 8001380:	dde9      	ble.n	8001356 <__sflush_r+0xae>
 8001382:	6a21      	ldr	r1, [r4, #32]
 8001384:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001386:	4643      	mov	r3, r8
 8001388:	463a      	mov	r2, r7
 800138a:	4628      	mov	r0, r5
 800138c:	47b0      	blx	r6
 800138e:	2800      	cmp	r0, #0
 8001390:	dc08      	bgt.n	80013a4 <__sflush_r+0xfc>
 8001392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800139a:	81a3      	strh	r3, [r4, #12]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013a4:	4407      	add	r7, r0
 80013a6:	eba8 0800 	sub.w	r8, r8, r0
 80013aa:	e7e7      	b.n	800137c <__sflush_r+0xd4>
 80013ac:	dfbffffe 	.word	0xdfbffffe

080013b0 <_fflush_r>:
 80013b0:	b538      	push	{r3, r4, r5, lr}
 80013b2:	690b      	ldr	r3, [r1, #16]
 80013b4:	4605      	mov	r5, r0
 80013b6:	460c      	mov	r4, r1
 80013b8:	b913      	cbnz	r3, 80013c0 <_fflush_r+0x10>
 80013ba:	2500      	movs	r5, #0
 80013bc:	4628      	mov	r0, r5
 80013be:	bd38      	pop	{r3, r4, r5, pc}
 80013c0:	b118      	cbz	r0, 80013ca <_fflush_r+0x1a>
 80013c2:	6a03      	ldr	r3, [r0, #32]
 80013c4:	b90b      	cbnz	r3, 80013ca <_fflush_r+0x1a>
 80013c6:	f7ff fc8f 	bl	8000ce8 <__sinit>
 80013ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f3      	beq.n	80013ba <_fflush_r+0xa>
 80013d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80013d4:	07d0      	lsls	r0, r2, #31
 80013d6:	d404      	bmi.n	80013e2 <_fflush_r+0x32>
 80013d8:	0599      	lsls	r1, r3, #22
 80013da:	d402      	bmi.n	80013e2 <_fflush_r+0x32>
 80013dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013de:	f7ff fe68 	bl	80010b2 <__retarget_lock_acquire_recursive>
 80013e2:	4628      	mov	r0, r5
 80013e4:	4621      	mov	r1, r4
 80013e6:	f7ff ff5f 	bl	80012a8 <__sflush_r>
 80013ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013ec:	07da      	lsls	r2, r3, #31
 80013ee:	4605      	mov	r5, r0
 80013f0:	d4e4      	bmi.n	80013bc <_fflush_r+0xc>
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	059b      	lsls	r3, r3, #22
 80013f6:	d4e1      	bmi.n	80013bc <_fflush_r+0xc>
 80013f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013fa:	f7ff fe5b 	bl	80010b4 <__retarget_lock_release_recursive>
 80013fe:	e7dd      	b.n	80013bc <_fflush_r+0xc>

08001400 <__swhatbuf_r>:
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	460c      	mov	r4, r1
 8001404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001408:	2900      	cmp	r1, #0
 800140a:	b096      	sub	sp, #88	@ 0x58
 800140c:	4615      	mov	r5, r2
 800140e:	461e      	mov	r6, r3
 8001410:	da0d      	bge.n	800142e <__swhatbuf_r+0x2e>
 8001412:	89a3      	ldrh	r3, [r4, #12]
 8001414:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001418:	f04f 0100 	mov.w	r1, #0
 800141c:	bf14      	ite	ne
 800141e:	2340      	movne	r3, #64	@ 0x40
 8001420:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001424:	2000      	movs	r0, #0
 8001426:	6031      	str	r1, [r6, #0]
 8001428:	602b      	str	r3, [r5, #0]
 800142a:	b016      	add	sp, #88	@ 0x58
 800142c:	bd70      	pop	{r4, r5, r6, pc}
 800142e:	466a      	mov	r2, sp
 8001430:	f000 f848 	bl	80014c4 <_fstat_r>
 8001434:	2800      	cmp	r0, #0
 8001436:	dbec      	blt.n	8001412 <__swhatbuf_r+0x12>
 8001438:	9901      	ldr	r1, [sp, #4]
 800143a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800143e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001442:	4259      	negs	r1, r3
 8001444:	4159      	adcs	r1, r3
 8001446:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800144a:	e7eb      	b.n	8001424 <__swhatbuf_r+0x24>

0800144c <__smakebuf_r>:
 800144c:	898b      	ldrh	r3, [r1, #12]
 800144e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001450:	079d      	lsls	r5, r3, #30
 8001452:	4606      	mov	r6, r0
 8001454:	460c      	mov	r4, r1
 8001456:	d507      	bpl.n	8001468 <__smakebuf_r+0x1c>
 8001458:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800145c:	6023      	str	r3, [r4, #0]
 800145e:	6123      	str	r3, [r4, #16]
 8001460:	2301      	movs	r3, #1
 8001462:	6163      	str	r3, [r4, #20]
 8001464:	b003      	add	sp, #12
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001468:	ab01      	add	r3, sp, #4
 800146a:	466a      	mov	r2, sp
 800146c:	f7ff ffc8 	bl	8001400 <__swhatbuf_r>
 8001470:	9f00      	ldr	r7, [sp, #0]
 8001472:	4605      	mov	r5, r0
 8001474:	4639      	mov	r1, r7
 8001476:	4630      	mov	r0, r6
 8001478:	f7ff fe8a 	bl	8001190 <_malloc_r>
 800147c:	b948      	cbnz	r0, 8001492 <__smakebuf_r+0x46>
 800147e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001482:	059a      	lsls	r2, r3, #22
 8001484:	d4ee      	bmi.n	8001464 <__smakebuf_r+0x18>
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	81a3      	strh	r3, [r4, #12]
 8001490:	e7e2      	b.n	8001458 <__smakebuf_r+0xc>
 8001492:	89a3      	ldrh	r3, [r4, #12]
 8001494:	6020      	str	r0, [r4, #0]
 8001496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800149a:	81a3      	strh	r3, [r4, #12]
 800149c:	9b01      	ldr	r3, [sp, #4]
 800149e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014a2:	b15b      	cbz	r3, 80014bc <__smakebuf_r+0x70>
 80014a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014a8:	4630      	mov	r0, r6
 80014aa:	f000 f81d 	bl	80014e8 <_isatty_r>
 80014ae:	b128      	cbz	r0, 80014bc <__smakebuf_r+0x70>
 80014b0:	89a3      	ldrh	r3, [r4, #12]
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	81a3      	strh	r3, [r4, #12]
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	431d      	orrs	r5, r3
 80014c0:	81a5      	strh	r5, [r4, #12]
 80014c2:	e7cf      	b.n	8001464 <__smakebuf_r+0x18>

080014c4 <_fstat_r>:
 80014c4:	b538      	push	{r3, r4, r5, lr}
 80014c6:	4d07      	ldr	r5, [pc, #28]	@ (80014e4 <_fstat_r+0x20>)
 80014c8:	2300      	movs	r3, #0
 80014ca:	4604      	mov	r4, r0
 80014cc:	4608      	mov	r0, r1
 80014ce:	4611      	mov	r1, r2
 80014d0:	602b      	str	r3, [r5, #0]
 80014d2:	f7ff f9ee 	bl	80008b2 <_fstat>
 80014d6:	1c43      	adds	r3, r0, #1
 80014d8:	d102      	bne.n	80014e0 <_fstat_r+0x1c>
 80014da:	682b      	ldr	r3, [r5, #0]
 80014dc:	b103      	cbz	r3, 80014e0 <_fstat_r+0x1c>
 80014de:	6023      	str	r3, [r4, #0]
 80014e0:	bd38      	pop	{r3, r4, r5, pc}
 80014e2:	bf00      	nop
 80014e4:	200001c8 	.word	0x200001c8

080014e8 <_isatty_r>:
 80014e8:	b538      	push	{r3, r4, r5, lr}
 80014ea:	4d06      	ldr	r5, [pc, #24]	@ (8001504 <_isatty_r+0x1c>)
 80014ec:	2300      	movs	r3, #0
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	602b      	str	r3, [r5, #0]
 80014f4:	f7ff f9ed 	bl	80008d2 <_isatty>
 80014f8:	1c43      	adds	r3, r0, #1
 80014fa:	d102      	bne.n	8001502 <_isatty_r+0x1a>
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	b103      	cbz	r3, 8001502 <_isatty_r+0x1a>
 8001500:	6023      	str	r3, [r4, #0]
 8001502:	bd38      	pop	{r3, r4, r5, pc}
 8001504:	200001c8 	.word	0x200001c8

08001508 <_sbrk_r>:
 8001508:	b538      	push	{r3, r4, r5, lr}
 800150a:	4d06      	ldr	r5, [pc, #24]	@ (8001524 <_sbrk_r+0x1c>)
 800150c:	2300      	movs	r3, #0
 800150e:	4604      	mov	r4, r0
 8001510:	4608      	mov	r0, r1
 8001512:	602b      	str	r3, [r5, #0]
 8001514:	f7ff f9f6 	bl	8000904 <_sbrk>
 8001518:	1c43      	adds	r3, r0, #1
 800151a:	d102      	bne.n	8001522 <_sbrk_r+0x1a>
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	b103      	cbz	r3, 8001522 <_sbrk_r+0x1a>
 8001520:	6023      	str	r3, [r4, #0]
 8001522:	bd38      	pop	{r3, r4, r5, pc}
 8001524:	200001c8 	.word	0x200001c8

08001528 <_init>:
 8001528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152a:	bf00      	nop
 800152c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152e:	bc08      	pop	{r3}
 8001530:	469e      	mov	lr, r3
 8001532:	4770      	bx	lr

08001534 <_fini>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	bf00      	nop
 8001538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153a:	bc08      	pop	{r3}
 800153c:	469e      	mov	lr, r3
 800153e:	4770      	bx	lr
